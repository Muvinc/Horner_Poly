// -------------------------------------------------------------
// 
// File Name: D:\B01-Study\MATLAB_Projects\Projects\Naive\codegen\Naive\hdlsrc\Naive_fixpt_tb.v
// Created: 2024-05-09 14:44:31
// 
// Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Naive_fixpt_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Naive_fixpt_tb;



  reg  clk;
  reg  reset;
  wire enb;
  wire signed [13:0] rawData_coef_re_0;  // sfix14_En4
  wire signed [13:0] rawData_coef_re_1;  // sfix14_En4
  wire signed [13:0] rawData_coef_re_2;  // sfix14_En4
  wire signed [13:0] rawData_coef_re_3;  // sfix14_En4
  wire signed [13:0] rawData_coef_re_4;  // sfix14_En4
  wire signed [13:0] rawData_coef_re_5;  // sfix14_En4
  wire signed [13:0] rawData_coef_im_0;  // sfix14_En4
  wire signed [13:0] rawData_coef_im_1;  // sfix14_En4
  wire signed [13:0] rawData_coef_im_2;  // sfix14_En4
  wire signed [13:0] rawData_coef_im_3;  // sfix14_En4
  wire signed [13:0] rawData_coef_im_4;  // sfix14_En4
  wire signed [13:0] rawData_coef_im_5;  // sfix14_En4
  wire y_re_done;  // ufix1
  wire rdEnb;
  wire y_re_done_enb;  // ufix1
  reg [11:0] y_re_addr;  // ufix12
  wire y_re_active;  // ufix1
  reg signed [13:0] holdData_coef_im_5;  // sfix14_En4
  reg signed [13:0] coef_im_5_offset;  // sfix14_En4
  wire signed [13:0] coef_im_5_1;  // sfix14_En4
  reg signed [13:0] holdData_coef_im_4;  // sfix14_En4
  reg signed [13:0] coef_im_4_offset;  // sfix14_En4
  wire signed [13:0] coef_im_4_1;  // sfix14_En4
  reg signed [13:0] holdData_coef_im_3;  // sfix14_En4
  reg signed [13:0] coef_im_3_offset;  // sfix14_En4
  wire signed [13:0] coef_im_3_1;  // sfix14_En4
  reg signed [13:0] holdData_coef_im_2;  // sfix14_En4
  reg signed [13:0] coef_im_2_offset;  // sfix14_En4
  wire signed [13:0] coef_im_2_1;  // sfix14_En4
  reg signed [13:0] holdData_coef_im_1;  // sfix14_En4
  reg signed [13:0] coef_im_1_offset;  // sfix14_En4
  wire signed [13:0] coef_im_1_1;  // sfix14_En4
  reg signed [13:0] holdData_coef_im_0;  // sfix14_En4
  reg signed [13:0] coef_im_0_offset;  // sfix14_En4
  wire signed [13:0] coef_im_0_1;  // sfix14_En4
  reg signed [13:0] holdData_coef_re_5;  // sfix14_En4
  reg signed [13:0] coef_re_5_offset;  // sfix14_En4
  wire signed [13:0] coef_re_5_1;  // sfix14_En4
  reg signed [13:0] holdData_coef_re_4;  // sfix14_En4
  reg signed [13:0] coef_re_4_offset;  // sfix14_En4
  wire signed [13:0] coef_re_4_1;  // sfix14_En4
  reg signed [13:0] holdData_coef_re_3;  // sfix14_En4
  reg signed [13:0] coef_re_3_offset;  // sfix14_En4
  wire signed [13:0] coef_re_3_1;  // sfix14_En4
  reg signed [13:0] holdData_coef_re_2;  // sfix14_En4
  reg signed [13:0] coef_re_2_offset;  // sfix14_En4
  wire signed [13:0] coef_re_2_1;  // sfix14_En4
  reg signed [13:0] holdData_coef_re_1;  // sfix14_En4
  reg signed [13:0] coef_re_1_offset;  // sfix14_En4
  wire signed [13:0] coef_re_1_1;  // sfix14_En4
  reg signed [13:0] holdData_coef_re_0;  // sfix14_En4
  reg signed [13:0] coef_re_0_offset;  // sfix14_En4
  wire signed [13:0] coef_re_0_1;  // sfix14_En4
  wire [11:0] x_in_addr_delay;  // ufix12
  wire tb_enb;
  reg signed [31:0] fp_x_in_im;  // sfix32
  reg signed [13:0] rawData_x_in_im;  // sfix14_En14
  reg signed [31:0] status_x_in_im;  // sfix32
  reg signed [13:0] holdData_x_in_im;  // sfix14_En14
  reg signed [13:0] x_in_im_offset;  // sfix14_En14
  wire signed [13:0] x_in_im;  // sfix14_En14
  reg [11:0] x_in_addr;  // ufix12
  wire x_in_active;  // ufix1
  wire x_in_enb;  // ufix1
  reg signed [31:0] fp_x_in_re;  // sfix32
  reg signed [13:0] rawData_x_in_re;  // sfix14_En14
  reg signed [31:0] status_x_in_re;  // sfix32
  reg signed [13:0] holdData_x_in_re;  // sfix14_En14
  reg signed [13:0] x_in_re_offset;  // sfix14_En14
  wire signed [13:0] x_in_re;  // sfix14_En14
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire ce_out;
  wire signed [13:0] y_re;  // sfix14_En11
  wire signed [13:0] y_im;  // sfix14_En11
  wire y_re_enb;  // ufix1
  wire y_re_lastAddr;  // ufix1
  wire [11:0] y_re_addr_delay_1;  // ufix12
  reg signed [31:0] fp_y_re_expected;  // sfix32
  reg signed [13:0] y_re_expected;  // sfix14_En11
  reg signed [31:0] status_y_re_expected;  // sfix32
  wire signed [13:0] y_re_ref;  // sfix14_En11
  reg  y_re_testFailure;  // ufix1
  reg signed [31:0] fp_y_im_expected;  // sfix32
  reg signed [13:0] y_im_expected;  // sfix14_En11
  reg signed [31:0] status_y_im_expected;  // sfix32
  wire signed [13:0] y_im_ref;  // sfix14_En11
  reg  y_im_testFailure;  // ufix1
  wire testFailure;  // ufix1


  // Data source for coef_re_0
  assign rawData_coef_re_0 = 14'sb11111110010001;



  // Data source for coef_re_1
  assign rawData_coef_re_1 = 14'sb11111101111000;



  // Data source for coef_re_2
  assign rawData_coef_re_2 = 14'sb00010100010001;



  // Data source for coef_re_3
  assign rawData_coef_re_3 = 14'sb00000000001101;



  // Data source for coef_re_4
  assign rawData_coef_re_4 = 14'sb11111101101000;



  // Data source for coef_re_5
  assign rawData_coef_re_5 = 14'sb00001100110011;



  // Data source for coef_im_0
  assign rawData_coef_im_0 = 14'sb00000011100001;



  // Data source for coef_im_1
  assign rawData_coef_im_1 = 14'sb11100101001111;



  // Data source for coef_im_2
  assign rawData_coef_im_2 = 14'sb01001110000100;



  // Data source for coef_im_3
  assign rawData_coef_im_3 = 14'sb00000000001111;



  // Data source for coef_im_4
  assign rawData_coef_im_4 = 14'sb11110111111000;



  // Data source for coef_im_5
  assign rawData_coef_im_5 = 14'sb00100010101011;



  assign y_re_done_enb = y_re_done & rdEnb;



  assign y_re_active = y_re_addr != 12'b101110110111;



  // holdData reg for coef
  always @(posedge clk or posedge reset)
    begin : stimuli_coef
      if (reset) begin
        holdData_coef_im_5 <= 14'bx;
      end
      else begin
        holdData_coef_im_5 <= rawData_coef_im_5;
      end
    end

  always @(rawData_coef_im_5 or rdEnb)
    begin : stimuli_coef_1
      if (rdEnb == 1'b0) begin
        coef_im_5_offset <= holdData_coef_im_5;
      end
      else begin
        coef_im_5_offset <= rawData_coef_im_5;
      end
    end

  assign #2 coef_im_5_1 = coef_im_5_offset;

  // holdData reg for coef
  always @(posedge clk or posedge reset)
    begin : stimuli_coef_2
      if (reset) begin
        holdData_coef_im_4 <= 14'bx;
      end
      else begin
        holdData_coef_im_4 <= rawData_coef_im_4;
      end
    end

  always @(rawData_coef_im_4 or rdEnb)
    begin : stimuli_coef_3
      if (rdEnb == 1'b0) begin
        coef_im_4_offset <= holdData_coef_im_4;
      end
      else begin
        coef_im_4_offset <= rawData_coef_im_4;
      end
    end

  assign #2 coef_im_4_1 = coef_im_4_offset;

  // holdData reg for coef
  always @(posedge clk or posedge reset)
    begin : stimuli_coef_4
      if (reset) begin
        holdData_coef_im_3 <= 14'bx;
      end
      else begin
        holdData_coef_im_3 <= rawData_coef_im_3;
      end
    end

  always @(rawData_coef_im_3 or rdEnb)
    begin : stimuli_coef_5
      if (rdEnb == 1'b0) begin
        coef_im_3_offset <= holdData_coef_im_3;
      end
      else begin
        coef_im_3_offset <= rawData_coef_im_3;
      end
    end

  assign #2 coef_im_3_1 = coef_im_3_offset;

  // holdData reg for coef
  always @(posedge clk or posedge reset)
    begin : stimuli_coef_6
      if (reset) begin
        holdData_coef_im_2 <= 14'bx;
      end
      else begin
        holdData_coef_im_2 <= rawData_coef_im_2;
      end
    end

  always @(rawData_coef_im_2 or rdEnb)
    begin : stimuli_coef_7
      if (rdEnb == 1'b0) begin
        coef_im_2_offset <= holdData_coef_im_2;
      end
      else begin
        coef_im_2_offset <= rawData_coef_im_2;
      end
    end

  assign #2 coef_im_2_1 = coef_im_2_offset;

  // holdData reg for coef
  always @(posedge clk or posedge reset)
    begin : stimuli_coef_8
      if (reset) begin
        holdData_coef_im_1 <= 14'bx;
      end
      else begin
        holdData_coef_im_1 <= rawData_coef_im_1;
      end
    end

  always @(rawData_coef_im_1 or rdEnb)
    begin : stimuli_coef_9
      if (rdEnb == 1'b0) begin
        coef_im_1_offset <= holdData_coef_im_1;
      end
      else begin
        coef_im_1_offset <= rawData_coef_im_1;
      end
    end

  assign #2 coef_im_1_1 = coef_im_1_offset;

  // holdData reg for coef
  always @(posedge clk or posedge reset)
    begin : stimuli_coef_10
      if (reset) begin
        holdData_coef_im_0 <= 14'bx;
      end
      else begin
        holdData_coef_im_0 <= rawData_coef_im_0;
      end
    end

  always @(rawData_coef_im_0 or rdEnb)
    begin : stimuli_coef_11
      if (rdEnb == 1'b0) begin
        coef_im_0_offset <= holdData_coef_im_0;
      end
      else begin
        coef_im_0_offset <= rawData_coef_im_0;
      end
    end

  assign #2 coef_im_0_1 = coef_im_0_offset;

  // holdData reg for coef
  always @(posedge clk or posedge reset)
    begin : stimuli_coef_12
      if (reset) begin
        holdData_coef_re_5 <= 14'bx;
      end
      else begin
        holdData_coef_re_5 <= rawData_coef_re_5;
      end
    end

  always @(rawData_coef_re_5 or rdEnb)
    begin : stimuli_coef_13
      if (rdEnb == 1'b0) begin
        coef_re_5_offset <= holdData_coef_re_5;
      end
      else begin
        coef_re_5_offset <= rawData_coef_re_5;
      end
    end

  assign #2 coef_re_5_1 = coef_re_5_offset;

  // holdData reg for coef
  always @(posedge clk or posedge reset)
    begin : stimuli_coef_14
      if (reset) begin
        holdData_coef_re_4 <= 14'bx;
      end
      else begin
        holdData_coef_re_4 <= rawData_coef_re_4;
      end
    end

  always @(rawData_coef_re_4 or rdEnb)
    begin : stimuli_coef_15
      if (rdEnb == 1'b0) begin
        coef_re_4_offset <= holdData_coef_re_4;
      end
      else begin
        coef_re_4_offset <= rawData_coef_re_4;
      end
    end

  assign #2 coef_re_4_1 = coef_re_4_offset;

  // holdData reg for coef
  always @(posedge clk or posedge reset)
    begin : stimuli_coef_16
      if (reset) begin
        holdData_coef_re_3 <= 14'bx;
      end
      else begin
        holdData_coef_re_3 <= rawData_coef_re_3;
      end
    end

  always @(rawData_coef_re_3 or rdEnb)
    begin : stimuli_coef_17
      if (rdEnb == 1'b0) begin
        coef_re_3_offset <= holdData_coef_re_3;
      end
      else begin
        coef_re_3_offset <= rawData_coef_re_3;
      end
    end

  assign #2 coef_re_3_1 = coef_re_3_offset;

  // holdData reg for coef
  always @(posedge clk or posedge reset)
    begin : stimuli_coef_18
      if (reset) begin
        holdData_coef_re_2 <= 14'bx;
      end
      else begin
        holdData_coef_re_2 <= rawData_coef_re_2;
      end
    end

  always @(rawData_coef_re_2 or rdEnb)
    begin : stimuli_coef_19
      if (rdEnb == 1'b0) begin
        coef_re_2_offset <= holdData_coef_re_2;
      end
      else begin
        coef_re_2_offset <= rawData_coef_re_2;
      end
    end

  assign #2 coef_re_2_1 = coef_re_2_offset;

  // holdData reg for coef
  always @(posedge clk or posedge reset)
    begin : stimuli_coef_20
      if (reset) begin
        holdData_coef_re_1 <= 14'bx;
      end
      else begin
        holdData_coef_re_1 <= rawData_coef_re_1;
      end
    end

  always @(rawData_coef_re_1 or rdEnb)
    begin : stimuli_coef_21
      if (rdEnb == 1'b0) begin
        coef_re_1_offset <= holdData_coef_re_1;
      end
      else begin
        coef_re_1_offset <= rawData_coef_re_1;
      end
    end

  assign #2 coef_re_1_1 = coef_re_1_offset;

  // holdData reg for coef
  always @(posedge clk or posedge reset)
    begin : stimuli_coef_22
      if (reset) begin
        holdData_coef_re_0 <= 14'bx;
      end
      else begin
        holdData_coef_re_0 <= rawData_coef_re_0;
      end
    end

  always @(rawData_coef_re_0 or rdEnb)
    begin : stimuli_coef_23
      if (rdEnb == 1'b0) begin
        coef_re_0_offset <= holdData_coef_re_0;
      end
      else begin
        coef_re_0_offset <= rawData_coef_re_0;
      end
    end

  assign #2 coef_re_0_1 = coef_re_0_offset;

  // Data source for x_in_im
  initial
    begin : x_in_im_fileread
      fp_x_in_im = $fopen("x_in_im.dat", "r");
      status_x_in_im = $rewind(fp_x_in_im);
    end

  always @(x_in_addr_delay, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_x_in_im <= 14'bx;
      end
      else if (rdEnb == 1) begin
        status_x_in_im = $fscanf(fp_x_in_im, "%h", rawData_x_in_im);
      end
    end

  // holdData reg for x_in
  always @(posedge clk or posedge reset)
    begin : stimuli_x_in
      if (reset) begin
        holdData_x_in_im <= 14'bx;
      end
      else begin
        holdData_x_in_im <= rawData_x_in_im;
      end
    end

  always @(rawData_x_in_im or rdEnb)
    begin : stimuli_x_in_1
      if (rdEnb == 1'b0) begin
        x_in_im_offset <= holdData_x_in_im;
      end
      else begin
        x_in_im_offset <= rawData_x_in_im;
      end
    end

  assign #2 x_in_im = x_in_im_offset;

  assign x_in_active = x_in_addr != 12'b101110110111;



  assign x_in_enb = x_in_active & (rdEnb & tb_enb);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 2999
  always @(posedge clk or posedge reset)
    begin : x_in_process
      if (reset == 1'b1) begin
        x_in_addr <= 12'b000000000000;
      end
      else begin
        if (x_in_enb) begin
          if (x_in_addr >= 12'b101110110111) begin
            x_in_addr <= 12'b000000000000;
          end
          else begin
            x_in_addr <= x_in_addr + 12'b000000000001;
          end
        end
      end
    end



  assign #1 x_in_addr_delay = x_in_addr;

  // Data source for x_in_re
  initial
    begin : x_in_re_fileread
      fp_x_in_re = $fopen("x_in_re.dat", "r");
      status_x_in_re = $rewind(fp_x_in_re);
    end

  always @(x_in_addr_delay, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_x_in_re <= 14'bx;
      end
      else if (rdEnb == 1) begin
        status_x_in_re = $fscanf(fp_x_in_re, "%h", rawData_x_in_re);
      end
    end

  // holdData reg for x_in
  always @(posedge clk or posedge reset)
    begin : stimuli_x_in_2
      if (reset) begin
        holdData_x_in_re <= 14'bx;
      end
      else begin
        holdData_x_in_re <= rawData_x_in_re;
      end
    end

  always @(rawData_x_in_re or rdEnb)
    begin : stimuli_x_in_3
      if (rdEnb == 1'b0) begin
        x_in_re_offset <= holdData_x_in_re;
      end
      else begin
        x_in_re_offset <= rawData_x_in_re;
      end
    end

  assign #2 x_in_re = x_in_re_offset;

  assign snkDonen =  ~ check1_done;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  assign rdEnb = (check1_done == 1'b0 ? tb_enb :
              1'b0);



  assign #2 enb = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (check1_done == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  Naive_fixpt u_Naive_fixpt (.clk(clk),
                             .reset(reset),
                             .clk_enable(enb),
                             .x_in_re(x_in_re),  // sfix14_En14
                             .x_in_im(x_in_im),  // sfix14_En14
                             .coef_re_0(coef_re_0_1),  // sfix14_En4
                             .coef_re_1(coef_re_1_1),  // sfix14_En4
                             .coef_re_2(coef_re_2_1),  // sfix14_En4
                             .coef_re_3(coef_re_3_1),  // sfix14_En4
                             .coef_re_4(coef_re_4_1),  // sfix14_En4
                             .coef_re_5(coef_re_5_1),  // sfix14_En4
                             .coef_im_0(coef_im_0_1),  // sfix14_En4
                             .coef_im_1(coef_im_1_1),  // sfix14_En4
                             .coef_im_2(coef_im_2_1),  // sfix14_En4
                             .coef_im_3(coef_im_3_1),  // sfix14_En4
                             .coef_im_4(coef_im_4_1),  // sfix14_En4
                             .coef_im_5(coef_im_5_1),  // sfix14_En4
                             .ce_out(ce_out),
                             .y_re(y_re),  // sfix14_En11
                             .y_im(y_im)  // sfix14_En11
                             );

  assign y_re_enb = ce_out & y_re_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 2999
  always @(posedge clk or posedge reset)
    begin : y_process
      if (reset == 1'b1) begin
        y_re_addr <= 12'b000000000000;
      end
      else begin
        if (y_re_enb) begin
          if (y_re_addr >= 12'b101110110111) begin
            y_re_addr <= 12'b000000000000;
          end
          else begin
            y_re_addr <= y_re_addr + 12'b000000000001;
          end
        end
      end
    end



  assign y_re_lastAddr = y_re_addr >= 12'b101110110111;



  assign y_re_done = y_re_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (y_re_done_enb) begin
          check1_done <= y_re_done;
        end
      end
    end

  assign #1 y_re_addr_delay_1 = y_re_addr;

  // Data source for y_re_expected
  initial
    begin : y_re_expected_fileread
      fp_y_re_expected = $fopen("y_re_expected.dat", "r");
      status_y_re_expected = $rewind(fp_y_re_expected);
    end

  always @(y_re_addr_delay_1, ce_out, tb_enb)
    begin
      if (tb_enb == 0) begin
        y_re_expected <= 14'bx;
      end
      else if (ce_out == 1) begin
        status_y_re_expected = $fscanf(fp_y_re_expected, "%h", y_re_expected);
      end
    end

  assign y_re_ref = y_re_expected;

  always @(posedge clk or posedge reset)
    begin : y_re_checker
      if (reset == 1'b1) begin
        y_re_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && y_re !== y_re_ref) begin
          y_re_testFailure <= 1'b1;
          $display("ERROR in y_re at time %t : Expected '%h' Actual '%h'", $time, y_re_ref, y_re);
        end
      end
    end

  // Data source for y_im_expected
  initial
    begin : y_im_expected_fileread
      fp_y_im_expected = $fopen("y_im_expected.dat", "r");
      status_y_im_expected = $rewind(fp_y_im_expected);
    end

  always @(y_re_addr_delay_1, ce_out, tb_enb)
    begin
      if (tb_enb == 0) begin
        y_im_expected <= 14'bx;
      end
      else if (ce_out == 1) begin
        status_y_im_expected = $fscanf(fp_y_im_expected, "%h", y_im_expected);
      end
    end

  assign y_im_ref = y_im_expected;

  always @(posedge clk or posedge reset)
    begin : y_im_checker
      if (reset == 1'b1) begin
        y_im_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && y_im !== y_im_ref) begin
          y_im_testFailure <= 1'b1;
          $display("ERROR in y_im at time %t : Expected '%h' Actual '%h'", $time, y_im_ref, y_im);
        end
      end
    end

  assign testFailure = y_re_testFailure | y_im_testFailure;



  always @(posedge clk)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // Naive_fixpt_tb

