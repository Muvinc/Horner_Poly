// -------------------------------------------------------------
// 
// File Name: D:\B01-Study\MATLAB_Projects\Projects\Horner_poly\codegen\Horner_poly_opt\hdlsrc\Horner_poly_opt_fixpt.v
// Created: 2024-06-04 01:31:46
// 
// Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y_re                          ce_out        1
// y_im                          ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Horner_poly_opt_fixpt
// Source Path: Horner_poly_opt_fixpt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Horner_poly_opt
          (clk,
           reset,
           clk_enable,
           x_in_re,
           x_in_im,
           ce_out,
           y_re,
           y_im);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [13:0] x_in_re;  // sfix14_En14
  input   signed [13:0] x_in_im;  // sfix14_En14
  output  ce_out;
  output  signed [13:0] y_re;  // sfix14_En7
  output  signed [13:0] y_im;  // sfix14_En7


  wire enb;
  reg signed [13:0] in1_re;  // sfix14_En14
  reg signed [13:0] in1_im;  // sfix14_En14
  wire signed [13:0] ar;  // sfix14_En14
  reg signed [13:0] reduced_reg [0:2];  // sfix14 [3]
  reg signed [13:0] reduced_reg_next [0:2];  // sfix14_En14 [3]
  reg signed [13:0] ar_1;  // sfix14_En14
  wire signed [13:0] a;  // sfix14_En14
  wire signed [27:0] tmp;  // sfix28_En28
  wire signed [13:0] a_1;  // sfix14_En14
  wire signed [27:0] tmp_1;  // sfix28_En28
  reg signed [27:0] tmp_2;  // sfix28_En28
  wire signed [28:0] tmp_3;  // sfix29_En28
  reg signed [27:0] tmp_4;  // sfix28_En28
  wire signed [28:0] tmp_5;  // sfix29_En28
  wire signed [28:0] tmp_6;  // sfix29_En28
  reg signed [28:0] tmp_7;  // sfix29_En28
  wire [13:0] tmp_8;  // ufix14_En14
  reg [13:0] tmp_9;  // ufix14_En14
  wire signed [27:0] cr;  // sfix28_En18
  wire signed [14:0] p103cr_cast;  // sfix15_En14
  wire signed [28:0] p103cr_mul_temp;  // sfix29_En18
  wire signed [27:0] ci;  // sfix28_En18
  wire signed [14:0] p104ci_cast;  // sfix15_En14
  wire signed [28:0] p104ci_mul_temp;  // sfix29_En18
  wire signed [27:0] tmp_re;  // sfix28_En18
  wire signed [27:0] tmp_im;  // sfix28_En18
  reg signed [27:0] tmp_re_1;  // sfix28_En18
  reg signed [27:0] tmp_im_1;  // sfix28_En18
  wire signed [28:0] tmp_re_2;  // sfix29_En18
  wire signed [28:0] tmp_im_2;  // sfix29_En18
  wire signed [28:0] tmp_re_3;  // sfix29_En18
  wire signed [28:0] tmp_im_3;  // sfix29_En18
  wire signed [28:0] br;  // sfix29_En18
  wire signed [14:0] multiplier_cast;  // sfix15_En14
  wire signed [43:0] multiplier_mul_temp;  // sfix44_En32
  wire signed [42:0] cr_1;  // sfix43_En32
  wire signed [28:0] bi;  // sfix29_En18
  wire signed [14:0] multiplier_cast_1;  // sfix15_En14
  wire signed [43:0] multiplier_mul_temp_1;  // sfix44_En32
  wire signed [42:0] ci_1;  // sfix43_En32
  wire signed [42:0] tmp_re_4;  // sfix43_En32
  wire signed [42:0] tmp_im_4;  // sfix43_En32
  reg signed [42:0] tmp_re_5;  // sfix43_En32
  reg signed [42:0] tmp_im_5;  // sfix43_En32
  wire signed [43:0] tmp_re_6;  // sfix44_En32
  wire signed [43:0] tmp_im_6;  // sfix44_En32
  wire signed [43:0] tmp_re_7;  // sfix44_En32
  wire signed [43:0] tmp_im_7;  // sfix44_En32
  wire signed [43:0] br_1;  // sfix44_En32
  wire signed [13:0] ai;  // sfix14_En14
  reg signed [13:0] reduced_reg_1 [0:2];  // sfix14 [3]
  reg signed [13:0] reduced_reg_next_1 [0:2];  // sfix14_En14 [3]
  reg signed [13:0] ai_1;  // sfix14_En14
  wire signed [43:0] bi_1;  // sfix44_En32
  wire signed [57:0] pr1;  // sfix58_En46
  wire signed [58:0] pr1in;  // sfix59_En46
  wire signed [57:0] pr2;  // sfix58_En46
  wire signed [58:0] pr2in;  // sfix59_En46
  wire signed [58:0] pre;  // sfix59_En46
  wire signed [57:0] pi1;  // sfix58_En46
  wire signed [58:0] pi1in;  // sfix59_En46
  wire signed [57:0] pi2;  // sfix58_En46
  wire signed [58:0] pi2in;  // sfix59_En46
  wire signed [58:0] pim;  // sfix59_En46
  wire signed [58:0] tmp_re_8;  // sfix59_En46
  wire signed [58:0] tmp_im_8;  // sfix59_En46
  reg signed [58:0] tmp_re_9;  // sfix59_En46
  reg signed [58:0] tmp_im_9;  // sfix59_En46
  wire signed [13:0] tmp_re_10;  // sfix14_En13
  wire signed [13:0] tmp_im_10;  // sfix14_En13
  wire signed [19:0] tmp_re_11;  // sfix20_En13
  wire signed [19:0] tmp_im_11;  // sfix20_En13
  reg signed [19:0] tmp_re_12;  // sfix20_En13
  reg signed [19:0] tmp_im_12;  // sfix20_En13
  wire signed [13:0] ar_2;  // sfix14_En14
  reg signed [13:0] reduced_reg_2 [0:3];  // sfix14 [4]
  reg signed [13:0] reduced_reg_next_2 [0:3];  // sfix14_En14 [4]
  reg signed [13:0] ar_3;  // sfix14_En14
  wire signed [27:0] cr_2;  // sfix28_En18
  wire signed [14:0] p85cr_cast;  // sfix15_En14
  wire signed [28:0] p85cr_mul_temp;  // sfix29_En18
  wire signed [27:0] ci_2;  // sfix28_En18
  wire signed [14:0] p87ci_cast;  // sfix15_En14
  wire signed [28:0] p87ci_mul_temp;  // sfix29_En18
  wire signed [27:0] tmp_re_13;  // sfix28_En18
  wire signed [27:0] tmp_im_13;  // sfix28_En18
  wire signed [28:0] tmp_re_14;  // sfix29_En18
  wire signed [28:0] tmp_im_14;  // sfix29_En18
  reg signed [28:0] tmp_re_15;  // sfix29_En18
  reg signed [28:0] tmp_im_15;  // sfix29_En18
  wire signed [27:0] cr_3;  // sfix28_En18
  wire signed [14:0] p89cr_cast;  // sfix15_En14
  wire signed [28:0] p89cr_mul_temp;  // sfix29_En18
  wire signed [27:0] ci_3;  // sfix28_En18
  wire signed [14:0] p91ci_cast;  // sfix15_En14
  wire signed [28:0] p91ci_mul_temp;  // sfix29_En18
  wire signed [27:0] tmp_re_16;  // sfix28_En18
  wire signed [27:0] tmp_im_16;  // sfix28_En18
  reg signed [27:0] tmp_re_17;  // sfix28_En18
  reg signed [27:0] tmp_im_17;  // sfix28_En18
  wire signed [28:0] tmp_re_18;  // sfix29_En18
  wire signed [28:0] tmp_im_18;  // sfix29_En18
  wire signed [28:0] tmp_re_19;  // sfix29_En18
  wire signed [28:0] tmp_im_19;  // sfix29_En18
  reg signed [28:0] tmp_re_20;  // sfix29_En18
  reg signed [28:0] tmp_im_20;  // sfix29_En18
  wire signed [29:0] tmp_re_21;  // sfix30_En18
  wire signed [29:0] tmp_im_21;  // sfix30_En18
  wire signed [29:0] tmp_re_22;  // sfix30_En18
  wire signed [29:0] tmp_im_22;  // sfix30_En18
  wire signed [29:0] br_2;  // sfix30_En18
  wire signed [13:0] ai_2;  // sfix14_En14
  reg signed [13:0] reduced_reg_3 [0:3];  // sfix14 [4]
  reg signed [13:0] reduced_reg_next_3 [0:3];  // sfix14_En14 [4]
  reg signed [13:0] ai_3;  // sfix14_En14
  wire signed [29:0] bi_2;  // sfix30_En18
  wire signed [43:0] pr1_1;  // sfix44_En32
  wire signed [44:0] pr1in_1;  // sfix45_En32
  wire signed [43:0] pr2_1;  // sfix44_En32
  wire signed [44:0] pr2in_1;  // sfix45_En32
  wire signed [44:0] pre_1;  // sfix45_En32
  wire signed [43:0] pi1_1;  // sfix44_En32
  wire signed [44:0] pi1in_1;  // sfix45_En32
  wire signed [43:0] pi2_1;  // sfix44_En32
  wire signed [44:0] pi2in_1;  // sfix45_En32
  wire signed [44:0] pim_1;  // sfix45_En32
  wire signed [44:0] tmp_re_23;  // sfix45_En32
  wire signed [44:0] tmp_im_23;  // sfix45_En32
  reg signed [44:0] tmp_re_24;  // sfix45_En32
  reg signed [44:0] tmp_im_24;  // sfix45_En32
  wire signed [13:0] tmp_re_25;  // sfix14_En8
  wire signed [13:0] tmp_im_25;  // sfix14_En8
  wire signed [19:0] tmp_re_26;  // sfix20_En13
  wire signed [19:0] tmp_im_26;  // sfix20_En13
  wire signed [19:0] tmp_re_27;  // sfix20_En13
  wire signed [19:0] tmp_im_27;  // sfix20_En13
  reg signed [19:0] tmp_re_28;  // sfix20_En13
  reg signed [19:0] tmp_im_28;  // sfix20_En13
  reg signed [31:0] reduced_t_0_0;  // int32
  reg signed [31:0] reduced_t_0_1;  // int32
  reg signed [31:0] reduced_t_0_01;  // int32
  reg signed [31:0] reduced_t_0_02;  // int32
  reg signed [31:0] reduced_t_0_1_1;  // int32
  reg signed [31:0] reduced_t_0_03;  // int32
  reg signed [31:0] reduced_t_0_1_2;  // int32


  assign enb = clk_enable;

  // HDL code generation from MATLAB function: Horner_poly_opt_fixpt
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //                                                                          %
  //          Generated by MATLAB 23.2 and Fixed-Point Designer 23.2          %
  //                                                                          %
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // Memory Polynomial Model
  // x_in: Input signal array of length N
  // coefficients: KxM matrix of coefficients
  // M: Memory depth
  // K: Non-linearity order
  // 初始化输出信号数组
  // 假定的矩阵A
  // % 定义字长和小数位数
  // wordLength = 32; % 总字长
  // fractionLength = 16; % 小数位数
  // 
  // % 初始化一个相同大小的定点数矩阵
  // coef_fixed = fi(zeros(size(coef)), 1, wordLength, fractionLength);
  // 
  // % 遍历矩阵的每个元素，转换为定点表示
  // coder.hdl.loopspec('unroll');
  // for row = 1:size(coef,1)
  //     for col = 1:size(coef,2)
  //         coef_fixed(row, col) = fi(coef(row, col), 1, wordLength, fractionLength);
  //     end
  // end
  // 声明和初始化延迟寄存器数组
  // persistent ud1 ud2 for memory
  // update input reg
  // in3 = in2;
  always @(posedge clk or posedge reset)
    begin : in1_reg_process
      if (reset == 1'b1) begin
        in1_re <= 14'sb00000000000000;
        in1_im <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          in1_re <= x_in_re;
          in1_im <= x_in_im;
        end
      end
    end



  assign ar = in1_re;



  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        reduced_reg[0] <= 14'sb00000000000000;
        reduced_reg[1] <= 14'sb00000000000000;
        reduced_reg[2] <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          for(reduced_t_0_1 = 32'sd0; reduced_t_0_1 <= 32'sd2; reduced_t_0_1 = reduced_t_0_1 + 32'sd1) begin
            reduced_reg[reduced_t_0_1] <= reduced_reg_next[reduced_t_0_1];
          end
        end
      end
    end

  always @* begin
    ar_1 = reduced_reg[2];
    reduced_reg_next[0] = ar;

    for(reduced_t_0_0 = 32'sd0; reduced_t_0_0 <= 32'sd1; reduced_t_0_0 = reduced_t_0_0 + 32'sd1) begin
      reduced_reg_next[reduced_t_0_0 + 32'sd1] = reduced_reg[reduced_t_0_0];
    end

  end



  // module (odd only)
  assign a = x_in_re;



  assign tmp = a * a;



  assign a_1 = x_in_im;



  assign tmp_1 = a_1 * a_1;



  always @(posedge clk or posedge reset)
    begin : p80tmp_outbuff_out_pipe_process
      if (reset == 1'b1) begin
        tmp_2 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_2 <= tmp;
        end
      end
    end



  assign tmp_3 = {tmp_2[27], tmp_2};



  always @(posedge clk or posedge reset)
    begin : p81tmp_outbuff_out_pipe_process
      if (reset == 1'b1) begin
        tmp_4 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_4 <= tmp_1;
        end
      end
    end



  assign tmp_5 = {tmp_4[27], tmp_4};



  assign tmp_6 = tmp_3 + tmp_5;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_process
      if (reset == 1'b1) begin
        tmp_7 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_7 <= tmp_6;
        end
      end
    end



  // memory polynomial
  // update module reg
  // update module reg
  assign tmp_8 = tmp_7[27:14];



  always @(posedge clk or posedge reset)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        tmp_9 <= 14'b00000000000000;
      end
      else begin
        if (enb) begin
          tmp_9 <= tmp_8;
        end
      end
    end



  assign p103cr_cast = {1'b0, tmp_8};
  assign p103cr_mul_temp = p103cr_cast * 14'sb00001100110011;
  assign cr = p103cr_mul_temp[27:0];



  assign p104ci_cast = {1'b0, tmp_8};
  assign p104ci_mul_temp = p104ci_cast * 14'sb00100010101011;
  assign ci = p104ci_mul_temp[27:0];



  assign tmp_re = cr;
  assign tmp_im = ci;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_1_process
      if (reset == 1'b1) begin
        tmp_re_1 <= 28'sb0000000000000000000000000000;
        tmp_im_1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_1 <= tmp_re;
          tmp_im_1 <= tmp_im;
        end
      end
    end



  assign tmp_re_2 = {tmp_re_1[27], tmp_re_1};
  assign tmp_im_2 = {tmp_im_1[27], tmp_im_1};



  assign tmp_re_3 = tmp_re_2 + 29'sb11111110110100000000000000000;
  assign tmp_im_3 = tmp_im_2 + 29'sb11111011111100000000000000000;



  assign br = tmp_re_3;



  assign multiplier_cast = {1'b0, tmp_9};
  assign multiplier_mul_temp = multiplier_cast * br;
  assign cr_1 = multiplier_mul_temp[42:0];



  assign bi = tmp_im_3;



  assign multiplier_cast_1 = {1'b0, tmp_9};
  assign multiplier_mul_temp_1 = multiplier_cast_1 * bi;
  assign ci_1 = multiplier_mul_temp_1[42:0];



  assign tmp_re_4 = cr_1;
  assign tmp_im_4 = ci_1;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_2_process
      if (reset == 1'b1) begin
        tmp_re_5 <= 43'sh00000000000;
        tmp_im_5 <= 43'sh00000000000;
      end
      else begin
        if (enb) begin
          tmp_re_5 <= tmp_re_4;
          tmp_im_5 <= tmp_im_4;
        end
      end
    end



  assign tmp_re_6 = {tmp_re_5[42], tmp_re_5};
  assign tmp_im_6 = {tmp_im_5[42], tmp_im_5};



  assign tmp_re_7 = tmp_re_6 + 44'sh000D0000000;
  assign tmp_im_7 = tmp_im_6 + 44'sh000F0000000;



  assign br_1 = tmp_re_7;



  assign ai = in1_im;



  always @(posedge clk or posedge reset)
    begin : reduced_2_process
      if (reset == 1'b1) begin
        reduced_reg_1[0] <= 14'sb00000000000000;
        reduced_reg_1[1] <= 14'sb00000000000000;
        reduced_reg_1[2] <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          for(reduced_t_0_1 = 32'sd0; reduced_t_0_1 <= 32'sd2; reduced_t_0_1 = reduced_t_0_1 + 32'sd1) begin
            reduced_reg_1[reduced_t_0_1] <= reduced_reg_next_1[reduced_t_0_1];
          end
        end
      end
    end

  always @* begin
    ai_1 = reduced_reg_1[2];
    reduced_reg_next_1[0] = ai;

    for(reduced_t_0_01 = 32'sd0; reduced_t_0_01 <= 32'sd1; reduced_t_0_01 = reduced_t_0_01 + 32'sd1) begin
      reduced_reg_next_1[reduced_t_0_01 + 32'sd1] = reduced_reg_1[reduced_t_0_01];
    end

  end



  assign bi_1 = tmp_im_7;



  assign pr1 = ar_1 * br_1;



  assign pr1in = {pr1[57], pr1};



  assign pr2 = ai_1 * bi_1;



  assign pr2in = {pr2[57], pr2};



  assign pre = pr1in - pr2in;



  assign pi1 = ar_1 * bi_1;



  assign pi1in = {pi1[57], pi1};



  assign pi2 = ai_1 * br_1;



  assign pi2in = {pi2[57], pi2};



  assign pim = pi1in + pi2in;



  assign tmp_re_8 = pre;
  assign tmp_im_8 = pim;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_3_process
      if (reset == 1'b1) begin
        tmp_re_9 <= 59'sh000000000000000;
        tmp_im_9 <= 59'sh000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_9 <= tmp_re_8;
          tmp_im_9 <= tmp_im_8;
        end
      end
    end



  assign tmp_re_10 = tmp_re_9[46:33];
  assign tmp_im_10 = tmp_im_9[46:33];



  assign tmp_re_11 = {{6{tmp_re_10[13]}}, tmp_re_10};
  assign tmp_im_11 = {{6{tmp_im_10[13]}}, tmp_im_10};



  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        tmp_re_12 <= 20'sb00000000000000000000;
        tmp_im_12 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_12 <= tmp_re_11;
          tmp_im_12 <= tmp_im_11;
        end
      end
    end



  assign ar_2 = x_in_re;



  always @(posedge clk or posedge reset)
    begin : reduced_3_process
      if (reset == 1'b1) begin
        reduced_reg_2[0] <= 14'sb00000000000000;
        reduced_reg_2[1] <= 14'sb00000000000000;
        reduced_reg_2[2] <= 14'sb00000000000000;
        reduced_reg_2[3] <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          for(reduced_t_0_1_1 = 32'sd0; reduced_t_0_1_1 <= 32'sd3; reduced_t_0_1_1 = reduced_t_0_1_1 + 32'sd1) begin
            reduced_reg_2[reduced_t_0_1_1] <= reduced_reg_next_2[reduced_t_0_1_1];
          end
        end
      end
    end

  always @* begin
    ar_3 = reduced_reg_2[3];
    reduced_reg_next_2[0] = ar_2;

    for(reduced_t_0_02 = 32'sd0; reduced_t_0_02 <= 32'sd2; reduced_t_0_02 = reduced_t_0_02 + 32'sd1) begin
      reduced_reg_next_2[reduced_t_0_02 + 32'sd1] = reduced_reg_2[reduced_t_0_02];
    end

  end



  assign p85cr_cast = {1'b0, tmp_8};
  assign p85cr_mul_temp = p85cr_cast * 14'sb11111101111000;
  assign cr_2 = p85cr_mul_temp[27:0];



  assign p87ci_cast = {1'b0, tmp_8};
  assign p87ci_mul_temp = p87ci_cast * 14'sb11100101001111;
  assign ci_2 = p87ci_mul_temp[27:0];



  assign tmp_re_13 = cr_2;
  assign tmp_im_13 = ci_2;



  assign tmp_re_14 = {tmp_re_13[27], tmp_re_13};
  assign tmp_im_14 = {tmp_im_13[27], tmp_im_13};



  always @(posedge clk or posedge reset)
    begin : delayMatch_1_process
      if (reset == 1'b1) begin
        tmp_re_15 <= 29'sb00000000000000000000000000000;
        tmp_im_15 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_15 <= tmp_re_14;
          tmp_im_15 <= tmp_im_14;
        end
      end
    end



  assign p89cr_cast = {1'b0, tmp_8};
  assign p89cr_mul_temp = p89cr_cast * 14'sb00010100010001;
  assign cr_3 = p89cr_mul_temp[27:0];



  assign p91ci_cast = {1'b0, tmp_8};
  assign p91ci_mul_temp = p91ci_cast * 14'sb01001110000100;
  assign ci_3 = p91ci_mul_temp[27:0];



  assign tmp_re_16 = cr_3;
  assign tmp_im_16 = ci_3;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_4_process
      if (reset == 1'b1) begin
        tmp_re_17 <= 28'sb0000000000000000000000000000;
        tmp_im_17 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_17 <= tmp_re_16;
          tmp_im_17 <= tmp_im_16;
        end
      end
    end



  assign tmp_re_18 = {tmp_re_17[27], tmp_re_17};
  assign tmp_im_18 = {tmp_im_17[27], tmp_im_17};



  assign tmp_re_19 = tmp_re_15 + tmp_re_18;
  assign tmp_im_19 = tmp_im_15 + tmp_im_18;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_5_process
      if (reset == 1'b1) begin
        tmp_re_20 <= 29'sb00000000000000000000000000000;
        tmp_im_20 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_20 <= tmp_re_19;
          tmp_im_20 <= tmp_im_19;
        end
      end
    end



  assign tmp_re_21 = {tmp_re_20[28], tmp_re_20};
  assign tmp_im_21 = {tmp_im_20[28], tmp_im_20};



  assign tmp_re_22 = tmp_re_21 + 30'sb111111111001000100000000000000;
  assign tmp_im_22 = tmp_im_21 + 30'sb000000001110000100000000000000;



  assign br_2 = tmp_re_22;



  assign ai_2 = x_in_im;



  always @(posedge clk or posedge reset)
    begin : reduced_4_process
      if (reset == 1'b1) begin
        reduced_reg_3[0] <= 14'sb00000000000000;
        reduced_reg_3[1] <= 14'sb00000000000000;
        reduced_reg_3[2] <= 14'sb00000000000000;
        reduced_reg_3[3] <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          for(reduced_t_0_1_2 = 32'sd0; reduced_t_0_1_2 <= 32'sd3; reduced_t_0_1_2 = reduced_t_0_1_2 + 32'sd1) begin
            reduced_reg_3[reduced_t_0_1_2] <= reduced_reg_next_3[reduced_t_0_1_2];
          end
        end
      end
    end

  always @* begin
    ai_3 = reduced_reg_3[3];
    reduced_reg_next_3[0] = ai_2;

    for(reduced_t_0_03 = 32'sd0; reduced_t_0_03 <= 32'sd2; reduced_t_0_03 = reduced_t_0_03 + 32'sd1) begin
      reduced_reg_next_3[reduced_t_0_03 + 32'sd1] = reduced_reg_3[reduced_t_0_03];
    end

  end



  assign bi_2 = tmp_im_22;



  assign pr1_1 = ar_3 * br_2;



  assign pr1in_1 = {pr1_1[43], pr1_1};



  assign pr2_1 = ai_3 * bi_2;



  assign pr2in_1 = {pr2_1[43], pr2_1};



  assign pre_1 = pr1in_1 - pr2in_1;



  assign pi1_1 = ar_3 * bi_2;



  assign pi1in_1 = {pi1_1[43], pi1_1};



  assign pi2_1 = ai_3 * br_2;



  assign pi2in_1 = {pi2_1[43], pi2_1};



  assign pim_1 = pi1in_1 + pi2in_1;



  assign tmp_re_23 = pre_1;
  assign tmp_im_23 = pim_1;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_6_process
      if (reset == 1'b1) begin
        tmp_re_24 <= 45'sh000000000000;
        tmp_im_24 <= 45'sh000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_24 <= tmp_re_23;
          tmp_im_24 <= tmp_im_23;
        end
      end
    end



  assign tmp_re_25 = tmp_re_24[37:24];
  assign tmp_im_25 = tmp_im_24[37:24];



  assign tmp_re_26 = {tmp_re_25[13], {tmp_re_25, 5'b00000}};
  assign tmp_im_26 = {tmp_im_25[13], {tmp_im_25, 5'b00000}};



  assign tmp_re_27 = tmp_re_12 + tmp_re_26;
  assign tmp_im_27 = tmp_im_12 + tmp_im_26;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_7_process
      if (reset == 1'b1) begin
        tmp_re_28 <= 20'sb00000000000000000000;
        tmp_im_28 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_28 <= tmp_re_27;
          tmp_im_28 <= tmp_im_27;
        end
      end
    end



  assign y_re = tmp_re_28[19:6];
  assign y_im = tmp_im_28[19:6];



  assign ce_out = clk_enable;

endmodule  // Horner_poly_opt_fixpt

