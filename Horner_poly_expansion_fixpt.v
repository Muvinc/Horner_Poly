// -------------------------------------------------------------
// 
// File Name: D:\B01-Study\MATLAB_Projects\Projects\Horner_poly\codegen\Horner_poly_expansion\hdlsrc\Horner_poly_expansion_fixpt.v
// Created: 2024-04-03 21:20:09
// 
// Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y_re                          ce_out        1
// y_im                          ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Horner_poly_expansion_fixpt
// Source Path: Horner_poly_expansion_fixpt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Horner_poly_expansion_fixpt
          (clk,
           reset,
           clk_enable,
           x_in_re,
           x_in_im,
           ce_out,
           y_re,
           y_im);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [13:0] x_in_re;  // sfix14_En14
  input   signed [13:0] x_in_im;  // sfix14_En14
  output  ce_out;
  output  signed [13:0] y_re;  // sfix14_En11
  output  signed [13:0] y_im;  // sfix14_En11


  wire enb;
  reg signed [13:0] in1_re;  // sfix14_En14
  reg signed [13:0] in1_im;  // sfix14_En14
  wire signed [13:0] in2_re;  // sfix14_En14
  wire signed [13:0] in2_im;  // sfix14_En14
  wire signed [13:0] ar;  // sfix14_En14
  wire signed [13:0] a;  // sfix14_En14
  wire signed [27:0] y;  // sfix28_En28
  wire signed [13:0] a_1;  // sfix14_En14
  wire signed [27:0] y_1;  // sfix28_En28
  wire [13:0] tmp;  // ufix14_En14
  wire signed [28:0] p10tmp_add_cast;  // sfix29_En28
  wire signed [28:0] p10tmp_add_cast_1;  // sfix29_En28
  wire signed [28:0] p10tmp_add_temp;  // sfix29_En28
  reg [13:0] mo1;  // ufix14_En14
  wire [13:0] mo2;  // ufix14_En16
  wire signed [27:0] cr;  // sfix28_En20
  wire signed [14:0] p43cr_cast;  // sfix15_En16
  wire signed [28:0] p43cr_mul_temp;  // sfix29_En20
  wire signed [27:0] ci;  // sfix28_En20
  wire signed [14:0] p44ci_cast;  // sfix15_En16
  wire signed [28:0] p44ci_mul_temp;  // sfix29_En20
  wire signed [30:0] c_re;  // sfix31_En20
  wire signed [30:0] c_im;  // sfix31_En20
  wire signed [30:0] p45c_add_cast;  // sfix31_En20
  wire signed [30:0] p45c_add_cast_1;  // sfix31_En20
  wire signed [30:0] br;  // sfix31_En20
  wire signed [44:0] cr_1;  // sfix45_En36
  wire signed [14:0] p48cr_cast;  // sfix15_En16
  wire signed [45:0] p48cr_mul_temp;  // sfix46_En36
  wire signed [30:0] bi;  // sfix31_En20
  wire signed [44:0] ci_1;  // sfix45_En36
  wire signed [14:0] p49ci_cast;  // sfix15_En16
  wire signed [45:0] p49ci_mul_temp;  // sfix46_En36
  wire signed [46:0] c_re_1;  // sfix47_En36
  wire signed [46:0] c_im_1;  // sfix47_En36
  wire signed [46:0] p50c_add_cast;  // sfix47_En36
  wire signed [46:0] p50c_add_cast_1;  // sfix47_En36
  wire signed [46:0] br_1;  // sfix47_En36
  wire signed [13:0] ai;  // sfix14_En14
  wire signed [46:0] bi_1;  // sfix47_En36
  wire signed [60:0] pr1;  // sfix61_En50
  wire signed [61:0] pr1in;  // sfix62_En50
  wire signed [60:0] pr2;  // sfix61_En50
  wire signed [61:0] pr2in;  // sfix62_En50
  wire signed [61:0] pre;  // sfix62_En50
  wire signed [60:0] pi1;  // sfix61_En50
  wire signed [61:0] pi1in;  // sfix62_En50
  wire signed [60:0] pi2;  // sfix61_En50
  wire signed [61:0] pi2in;  // sfix62_En50
  wire signed [61:0] pim;  // sfix62_En50
  wire signed [13:0] y_1_re;  // sfix14_En13
  wire signed [13:0] y_1_im;  // sfix14_En13
  wire signed [13:0] ar_1;  // sfix14_En14
  wire signed [27:0] cr_2;  // sfix28_En18
  wire signed [14:0] p15cr_cast;  // sfix15_En14
  wire signed [28:0] p15cr_mul_temp;  // sfix29_En18
  wire signed [27:0] ci_2;  // sfix28_En18
  wire signed [14:0] p17ci_cast;  // sfix15_En14
  wire signed [28:0] p17ci_mul_temp;  // sfix29_En18
  wire signed [28:0] c_re_2;  // sfix29_En18
  wire signed [28:0] c_im_2;  // sfix29_En18
  wire signed [28:0] p18c_add_cast;  // sfix29_En18
  wire signed [28:0] p18c_add_cast_1;  // sfix29_En18
  wire signed [28:0] br_2;  // sfix29_En18
  wire signed [42:0] cr_3;  // sfix43_En32
  wire signed [14:0] p22cr_cast;  // sfix15_En14
  wire signed [43:0] p22cr_mul_temp;  // sfix44_En32
  wire signed [28:0] bi_2;  // sfix29_En18
  wire signed [42:0] ci_3;  // sfix43_En32
  wire signed [14:0] p24ci_cast;  // sfix15_En14
  wire signed [43:0] p24ci_mul_temp;  // sfix44_En32
  wire signed [43:0] c_re_3;  // sfix44_En32
  wire signed [43:0] c_im_3;  // sfix44_En32
  wire signed [43:0] p25c_add_cast;  // sfix44_En32
  wire signed [43:0] p25c_add_cast_1;  // sfix44_En32
  wire signed [43:0] br_3;  // sfix44_En32
  wire signed [13:0] ai_1;  // sfix14_En14
  wire signed [43:0] bi_3;  // sfix44_En32
  wire signed [57:0] pr1_1;  // sfix58_En46
  wire signed [58:0] pr1in_1;  // sfix59_En46
  wire signed [57:0] pr2_1;  // sfix58_En46
  wire signed [58:0] pr2in_1;  // sfix59_En46
  wire signed [58:0] pre_1;  // sfix59_En46
  wire signed [57:0] pi1_1;  // sfix58_En46
  wire signed [58:0] pi1in_1;  // sfix59_En46
  wire signed [57:0] pi2_1;  // sfix58_En46
  wire signed [58:0] pi2in_1;  // sfix59_En46
  wire signed [58:0] pim_1;  // sfix59_En46
  wire signed [13:0] y_0_re;  // sfix14_En11
  wire signed [13:0] y_0_im;  // sfix14_En11
  wire signed [16:0] p66y_add_cast;  // sfix17_En13
  wire signed [16:0] p66y_add_cast_1;  // sfix17_En13
  wire signed [16:0] p66y_add_temp;  // sfix17_En13
  wire signed [16:0] p66y_add_cast_2;  // sfix17_En13
  wire signed [16:0] p66y_add_cast_3;  // sfix17_En13
  wire signed [16:0] p66y_add_temp_1;  // sfix17_En13


  assign enb = clk_enable;

  // HDL code generation from MATLAB function: Horner_poly_expansion_fixpt
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //                                                                          %
  //          Generated by MATLAB 23.2 and Fixed-Point Designer 23.2          %
  //                                                                          %
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // Memory Polynomial Model
  // x_in: Input signal array of length N
  // coefficients: KxM matrix of coefficients
  // M: Memory depth
  // K: Non-linearity order
  // 初始化输出信号数组
  // 假定的矩阵A
  // % 定义字长和小数位数
  // wordLength = 32; % 总字长
  // fractionLength = 16; % 小数位数
  // 
  // % 初始化一个相同大小的定点数矩阵
  // coef_fixed = fi(zeros(size(coef)), 1, wordLength, fractionLength);
  // 
  // % 遍历矩阵的每个元素，转换为定点表示
  // coder.hdl.loopspec('unroll');
  // for row = 1:size(coef,1)
  //     for col = 1:size(coef,2)
  //         coef_fixed(row, col) = fi(coef(row, col), 1, wordLength, fractionLength);
  //     end
  // end
  // 声明和初始化延迟寄存器数组
  // persistent ud1 ud2 for memory
  // update input reg
  // in3 = in2;
  always @(posedge clk or posedge reset)
    begin : in1_reg_process
      if (reset == 1'b1) begin
        in1_re <= 14'sb00000000000000;
        in1_im <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          in1_re <= x_in_re;
          in1_im <= x_in_im;
        end
      end
    end



  assign in2_re = in1_re;
  assign in2_im = in1_im;



  assign ar = in2_re;



  // module (odd only)
  assign a = x_in_re;



  assign y = a * a;



  assign a_1 = x_in_im;



  assign y_1 = a_1 * a_1;



  // memory polynomial
  assign p10tmp_add_cast = {y[27], y};
  assign p10tmp_add_cast_1 = {y_1[27], y_1};
  assign p10tmp_add_temp = p10tmp_add_cast + p10tmp_add_cast_1;
  assign tmp = p10tmp_add_temp[27:14];



  // update module reg
  always @(posedge clk or posedge reset)
    begin : mo1_reg_process
      if (reset == 1'b1) begin
        mo1 <= 14'b00000000000000;
      end
      else begin
        if (enb) begin
          mo1 <= tmp;
        end
      end
    end



  assign mo2 = {mo1[11:0], 2'b00};



  assign p43cr_cast = {1'b0, mo2};
  assign p43cr_mul_temp = p43cr_cast * 14'sb00001100110011;
  assign cr = p43cr_mul_temp[27:0];



  assign p44ci_cast = {1'b0, mo2};
  assign p44ci_mul_temp = p44ci_cast * 14'sb00100010101011;
  assign ci = p44ci_mul_temp[27:0];



  assign p45c_add_cast = {{3{cr[27]}}, cr};
  assign c_re = p45c_add_cast + 31'sb1111111011010000000000000000000;
  assign p45c_add_cast_1 = {{3{ci[27]}}, ci};
  assign c_im = p45c_add_cast_1 + 31'sb1111101111110000000000000000000;



  assign br = c_re;



  assign p48cr_cast = {1'b0, mo2};
  assign p48cr_mul_temp = p48cr_cast * br;
  assign cr_1 = p48cr_mul_temp[44:0];



  assign bi = c_im;



  assign p49ci_cast = {1'b0, mo2};
  assign p49ci_mul_temp = p49ci_cast * bi;
  assign ci_1 = p49ci_mul_temp[44:0];



  assign p50c_add_cast = {{2{cr_1[44]}}, cr_1};
  assign c_re_1 = p50c_add_cast + 47'sh000D00000000;
  assign p50c_add_cast_1 = {{2{ci_1[44]}}, ci_1};
  assign c_im_1 = p50c_add_cast_1 + 47'sh000F00000000;



  assign br_1 = c_re_1;



  assign ai = in2_im;



  assign bi_1 = c_im_1;



  assign pr1 = ar * br_1;



  assign pr1in = {pr1[60], pr1};



  assign pr2 = ai * bi_1;



  assign pr2in = {pr2[60], pr2};



  assign pre = pr1in - pr2in;



  assign pi1 = ar * bi_1;



  assign pi1in = {pi1[60], pi1};



  assign pi2 = ai * br_1;



  assign pi2in = {pi2[60], pi2};



  assign pim = pi1in + pi2in;



  assign y_1_re = pre[50:37];
  assign y_1_im = pim[50:37];



  assign ar_1 = x_in_re;



  assign p15cr_cast = {1'b0, tmp};
  assign p15cr_mul_temp = p15cr_cast * 14'sb00010100010001;
  assign cr_2 = p15cr_mul_temp[27:0];



  assign p17ci_cast = {1'b0, tmp};
  assign p17ci_mul_temp = p17ci_cast * 14'sb01001110000100;
  assign ci_2 = p17ci_mul_temp[27:0];



  assign p18c_add_cast = {cr_2[27], cr_2};
  assign c_re_2 = p18c_add_cast + 29'sb11111110111100000000000000000;
  assign p18c_add_cast_1 = {ci_2[27], ci_2};
  assign c_im_2 = p18c_add_cast_1 + 29'sb11110010100111100000000000000;



  assign br_2 = c_re_2;



  assign p22cr_cast = {1'b0, tmp};
  assign p22cr_mul_temp = p22cr_cast * br_2;
  assign cr_3 = p22cr_mul_temp[42:0];



  assign bi_2 = c_im_2;



  assign p24ci_cast = {1'b0, tmp};
  assign p24ci_mul_temp = p24ci_cast * bi_2;
  assign ci_3 = p24ci_mul_temp[42:0];



  assign p25c_add_cast = {cr_3[42], cr_3};
  assign c_re_3 = p25c_add_cast + 44'shFF910000000;
  assign p25c_add_cast_1 = {ci_3[42], ci_3};
  assign c_im_3 = p25c_add_cast_1 + 44'sh00E10000000;



  assign br_3 = c_re_3;



  assign ai_1 = x_in_im;



  assign bi_3 = c_im_3;



  assign pr1_1 = ar_1 * br_3;



  assign pr1in_1 = {pr1_1[57], pr1_1};



  assign pr2_1 = ai_1 * bi_3;



  assign pr2in_1 = {pr2_1[57], pr2_1};



  assign pre_1 = pr1in_1 - pr2in_1;



  assign pi1_1 = ar_1 * bi_3;



  assign pi1in_1 = {pi1_1[57], pi1_1};



  assign pi2_1 = ai_1 * br_3;



  assign pi2in_1 = {pi2_1[57], pi2_1};



  assign pim_1 = pi1in_1 + pi2in_1;



  assign y_0_re = pre_1[48:35];
  assign y_0_im = pim_1[48:35];



  assign p66y_add_cast = {{3{y_1_re[13]}}, y_1_re};
  assign p66y_add_cast_1 = {y_0_re[13], {y_0_re, 2'b00}};
  assign p66y_add_temp = p66y_add_cast + p66y_add_cast_1;
  assign y_re = p66y_add_temp[15:2];
  assign p66y_add_cast_2 = {{3{y_1_im[13]}}, y_1_im};
  assign p66y_add_cast_3 = {y_0_im[13], {y_0_im, 2'b00}};
  assign p66y_add_temp_1 = p66y_add_cast_2 + p66y_add_cast_3;
  assign y_im = p66y_add_temp_1[15:2];



  assign ce_out = clk_enable;

endmodule  // Horner_poly_expansion_fixpt

