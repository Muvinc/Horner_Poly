// -------------------------------------------------------------
// 
// File Name: D:\B01-Study\MATLAB_Projects\Projects\Naive_figure\codegen\Naive_opt\hdlsrc\Naive_opt_fixpt.v
// Created: 2024-06-08 14:40:32
// 
// Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y_re                          ce_out        1
// y_im                          ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Naive_opt_fixpt
// Source Path: Naive_opt_fixpt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Naive_opt
          (clk,
           reset,
           clk_enable,
           x_in_re,
           x_in_im,
           coef_re_0,
           coef_re_1,
           coef_re_2,
           coef_re_3,
           coef_re_4,
           coef_re_5,
           coef_im_0,
           coef_im_1,
           coef_im_2,
           coef_im_3,
           coef_im_4,
           coef_im_5,
           ce_out,
           y_re,
           y_im);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [13:0] x_in_re;  // sfix14_En14
  input   signed [13:0] x_in_im;  // sfix14_En14
  input   signed [13:0] coef_re_0;  // sfix14_En4
  input   signed [13:0] coef_re_1;  // sfix14_En4
  input   signed [13:0] coef_re_2;  // sfix14_En4
  input   signed [13:0] coef_re_3;  // sfix14_En4
  input   signed [13:0] coef_re_4;  // sfix14_En4
  input   signed [13:0] coef_re_5;  // sfix14_En4
  input   signed [13:0] coef_im_0;  // sfix14_En4
  input   signed [13:0] coef_im_1;  // sfix14_En4
  input   signed [13:0] coef_im_2;  // sfix14_En4
  input   signed [13:0] coef_im_3;  // sfix14_En4
  input   signed [13:0] coef_im_4;  // sfix14_En4
  input   signed [13:0] coef_im_5;  // sfix14_En4
  output  ce_out;
  output  signed [13:0] y_re;  // sfix14_En11
  output  signed [13:0] y_im;  // sfix14_En11


  wire enb;
  wire signed [13:0] coef_re [0:2] [0:1];  // sfix14_En4 [3x2]
  wire signed [13:0] coef_im [0:2] [0:1];  // sfix14_En4 [3x2]
  reg signed [13:0] c258_coef_re [0:5];  // sfix14_En4 [6]
  reg signed [13:0] c258_coef_im [0:5];  // sfix14_En4 [6]
  wire signed [13:0] tmp_re;  // sfix14_En4
  wire signed [13:0] tmp_im;  // sfix14_En4
  wire [13:0] tmp_re_1;  // ufix14_En14
  wire [13:0] tmp_im_1;  // ufix14_En14
  wire [13:0] ar;  // ufix14_En14
  wire signed [13:0] br;  // sfix14_En14
  wire [13:0] ai;  // ufix14_En14
  wire signed [13:0] bi;  // sfix14_En14
  wire signed [14:0] multiplier_cast;  // sfix15_En14
  wire signed [28:0] multiplier_mul_temp;  // sfix29_En28
  wire signed [27:0] pr1;  // sfix28_En28
  wire signed [28:0] pr1in;  // sfix29_En28
  wire signed [14:0] multiplier_cast_1;  // sfix15_En14
  wire signed [28:0] multiplier_mul_temp_1;  // sfix29_En28
  wire signed [27:0] pr2;  // sfix28_En28
  wire signed [28:0] pr2in;  // sfix29_En28
  wire signed [28:0] pre;  // sfix29_En28
  wire signed [14:0] multiplier_cast_2;  // sfix15_En14
  wire signed [28:0] multiplier_mul_temp_2;  // sfix29_En28
  wire signed [27:0] pi1;  // sfix28_En28
  wire signed [28:0] pi1in;  // sfix29_En28
  wire signed [14:0] multiplier_cast_3;  // sfix15_En14
  wire signed [28:0] multiplier_mul_temp_3;  // sfix29_En28
  wire signed [27:0] pi2;  // sfix28_En28
  wire signed [28:0] pi2in;  // sfix29_En28
  wire signed [28:0] pim;  // sfix29_En28
  wire signed [28:0] tmp_re_2;  // sfix29_En28
  wire signed [28:0] tmp_im_2;  // sfix29_En28
  reg signed [28:0] tmp_re_3;  // sfix29_En28
  reg signed [28:0] tmp_im_3;  // sfix29_En28
  wire signed [13:0] tmp_re_4;  // sfix14_En13
  wire signed [13:0] tmp_im_4;  // sfix14_En13
  wire signed [17:0] tmp_re_5;  // sfix18_En13
  wire signed [17:0] tmp_im_5;  // sfix18_En13
  reg signed [17:0] tmp_re_6;  // sfix18_En13
  reg signed [17:0] tmp_im_6;  // sfix18_En13
  reg signed [13:0] c260_coef_re [0:5];  // sfix14_En4 [6]
  reg signed [13:0] c260_coef_im [0:5];  // sfix14_En4 [6]
  wire signed [13:0] tmp_re_7;  // sfix14_En4
  wire signed [13:0] tmp_im_7;  // sfix14_En4
  wire signed [13:0] tmp_re_8;  // sfix14_En7
  wire signed [13:0] tmp_im_8;  // sfix14_En7
  wire signed [13:0] ar_1;  // sfix14_En7
  wire signed [13:0] br_1;  // sfix14_En14
  wire signed [13:0] ai_1;  // sfix14_En7
  wire signed [13:0] bi_1;  // sfix14_En14
  wire signed [27:0] pr1_1;  // sfix28_En21
  wire signed [28:0] pr1in_1;  // sfix29_En21
  wire signed [27:0] pr2_1;  // sfix28_En21
  wire signed [28:0] pr2in_1;  // sfix29_En21
  wire signed [28:0] pre_1;  // sfix29_En21
  wire signed [27:0] pi1_1;  // sfix28_En21
  wire signed [28:0] pi1in_1;  // sfix29_En21
  wire signed [27:0] pi2_1;  // sfix28_En21
  wire signed [28:0] pi2in_1;  // sfix29_En21
  wire signed [28:0] pim_1;  // sfix29_En21
  wire signed [28:0] tmp_re_9;  // sfix29_En21
  wire signed [28:0] tmp_im_9;  // sfix29_En21
  wire signed [28:0] ar_2;  // sfix29_En21
  reg signed [28:0] ar_3;  // sfix29_En21
  wire signed [13:0] ar_4;  // sfix14_En14
  wire signed [13:0] tmp;  // sfix14_En14
  wire signed [14:0] p264tmp_cast;  // sfix15_En14
  wire signed [14:0] p264tmp_cast_1;  // sfix15_En14
  wire signed [13:0] tmp_re_10;  // sfix14_En14
  wire signed [13:0] tmp_im_10;  // sfix14_En14
  wire signed [13:0] br_2;  // sfix14_En14
  wire signed [13:0] ai_2;  // sfix14_En14
  wire signed [13:0] bi_2;  // sfix14_En14
  wire signed [27:0] pr1_2;  // sfix28_En28
  wire signed [28:0] pr1in_2;  // sfix29_En28
  wire signed [27:0] pr2_2;  // sfix28_En28
  wire signed [28:0] pr2in_2;  // sfix29_En28
  wire signed [28:0] pre_2;  // sfix29_En28
  wire signed [27:0] pi1_2;  // sfix28_En28
  wire signed [28:0] pi1in_2;  // sfix29_En28
  wire signed [27:0] pi2_2;  // sfix28_En28
  wire signed [28:0] pi2in_2;  // sfix29_En28
  wire signed [28:0] pim_2;  // sfix29_En28
  wire signed [28:0] tmp_re_11;  // sfix29_En28
  wire signed [28:0] tmp_im_11;  // sfix29_En28
  reg signed [28:0] tmp_re_12;  // sfix29_En28
  reg signed [28:0] tmp_im_12;  // sfix29_En28
  wire [13:0] tmp_re_13;  // ufix14_En16
  wire [13:0] tmp_im_13;  // ufix14_En16
  wire [13:0] br_3;  // ufix14_En16
  wire signed [28:0] ai_3;  // sfix29_En21
  reg signed [28:0] ai_4;  // sfix29_En21
  wire [13:0] bi_3;  // ufix14_En16
  wire signed [14:0] multiplier_cast_4;  // sfix15_En16
  wire signed [43:0] multiplier_mul_temp_4;  // sfix44_En37
  wire signed [42:0] pr1_3;  // sfix43_En37
  wire signed [43:0] pr1in_3;  // sfix44_En37
  wire signed [14:0] multiplier_cast_5;  // sfix15_En16
  wire signed [43:0] multiplier_mul_temp_5;  // sfix44_En37
  wire signed [42:0] pr2_3;  // sfix43_En37
  wire signed [43:0] pr2in_3;  // sfix44_En37
  wire signed [43:0] pre_3;  // sfix44_En37
  wire signed [14:0] multiplier_cast_6;  // sfix15_En16
  wire signed [43:0] multiplier_mul_temp_6;  // sfix44_En37
  wire signed [42:0] pi1_3;  // sfix43_En37
  wire signed [43:0] pi1in_3;  // sfix44_En37
  wire signed [14:0] multiplier_cast_7;  // sfix15_En16
  wire signed [43:0] multiplier_mul_temp_7;  // sfix44_En37
  wire signed [42:0] pi2_3;  // sfix43_En37
  wire signed [43:0] pi2in_3;  // sfix44_En37
  wire signed [43:0] pim_3;  // sfix44_En37
  wire signed [43:0] tmp_re_14;  // sfix44_En37
  wire signed [43:0] tmp_im_14;  // sfix44_En37
  reg signed [43:0] tmp_re_15;  // sfix44_En37
  reg signed [43:0] tmp_im_15;  // sfix44_En37
  wire signed [13:0] tmp_re_16;  // sfix14_En10
  wire signed [13:0] tmp_im_16;  // sfix14_En10
  wire signed [17:0] tmp_re_17;  // sfix18_En13
  wire signed [17:0] tmp_im_17;  // sfix18_En13
  wire signed [17:0] tmp_re_18;  // sfix18_En13
  wire signed [17:0] tmp_im_18;  // sfix18_En13
  wire signed [18:0] tmp_re_19;  // sfix19_En13
  wire signed [18:0] tmp_im_19;  // sfix19_En13
  reg signed [13:0] c262_coef_re [0:5];  // sfix14_En4 [6]
  reg signed [13:0] c262_coef_im [0:5];  // sfix14_En4 [6]
  wire signed [13:0] tmp_re_20;  // sfix14_En4
  wire signed [13:0] tmp_im_20;  // sfix14_En4
  wire [13:0] tmp_re_21;  // ufix14_En6
  wire [13:0] tmp_im_21;  // ufix14_En6
  wire [13:0] ar_5;  // ufix14_En6
  wire signed [13:0] br_4;  // sfix14_En14
  wire [13:0] ai_5;  // ufix14_En6
  wire signed [13:0] bi_4;  // sfix14_En14
  wire signed [14:0] multiplier_cast_8;  // sfix15_En6
  wire signed [28:0] multiplier_mul_temp_8;  // sfix29_En20
  wire signed [27:0] pr1_4;  // sfix28_En20
  wire signed [28:0] pr1in_4;  // sfix29_En20
  wire signed [14:0] multiplier_cast_9;  // sfix15_En6
  wire signed [28:0] multiplier_mul_temp_9;  // sfix29_En20
  wire signed [27:0] pr2_4;  // sfix28_En20
  wire signed [28:0] pr2in_4;  // sfix29_En20
  wire signed [28:0] pre_4;  // sfix29_En20
  wire signed [14:0] multiplier_cast_10;  // sfix15_En6
  wire signed [28:0] multiplier_mul_temp_10;  // sfix29_En20
  wire signed [27:0] pi1_4;  // sfix28_En20
  wire signed [28:0] pi1in_4;  // sfix29_En20
  wire signed [14:0] multiplier_cast_11;  // sfix15_En6
  wire signed [28:0] multiplier_mul_temp_11;  // sfix29_En20
  wire signed [27:0] pi2_4;  // sfix28_En20
  wire signed [28:0] pi2in_4;  // sfix29_En20
  wire signed [28:0] pim_4;  // sfix29_En20
  wire signed [28:0] tmp_re_22;  // sfix29_En20
  wire signed [28:0] tmp_im_22;  // sfix29_En20
  wire signed [28:0] ar_6;  // sfix29_En20
  reg signed [28:0] ar_7;  // sfix29_En20
  wire [13:0] ar_8;  // ufix14_En16
  wire [13:0] br_5;  // ufix14_En16
  wire [13:0] ai_6;  // ufix14_En16
  wire [13:0] bi_5;  // ufix14_En16
  wire [27:0] pr1_5;  // ufix28_En32
  wire [28:0] pr1in_5;  // ufix29_En32
  wire [27:0] pr2_5;  // ufix28_En32
  wire [28:0] pr2in_5;  // ufix29_En32
  wire [28:0] pre_5;  // ufix29_En32
  wire [27:0] pi1_5;  // ufix28_En32
  wire [28:0] pi1in_5;  // ufix29_En32
  wire [27:0] pi2_5;  // ufix28_En32
  wire [28:0] pi2in_5;  // ufix29_En32
  wire [28:0] pim_5;  // ufix29_En32
  wire [28:0] tmp_re_23;  // ufix29_En32
  wire [28:0] tmp_im_23;  // ufix29_En32
  wire [28:0] br_6;  // ufix29_En32
  wire signed [28:0] ai_7;  // sfix29_En20
  reg signed [28:0] ai_8;  // sfix29_En20
  wire [28:0] bi_6;  // ufix29_En32
  wire signed [29:0] multiplier_cast_12;  // sfix30_En32
  wire signed [58:0] multiplier_mul_temp_12;  // sfix59_En52
  wire signed [57:0] pr1_6;  // sfix58_En52
  wire signed [58:0] pr1in_6;  // sfix59_En52
  wire signed [29:0] multiplier_cast_13;  // sfix30_En32
  wire signed [58:0] multiplier_mul_temp_13;  // sfix59_En52
  wire signed [57:0] pr2_6;  // sfix58_En52
  wire signed [58:0] pr2in_6;  // sfix59_En52
  wire signed [58:0] pre_6;  // sfix59_En52
  wire signed [29:0] multiplier_cast_14;  // sfix30_En32
  wire signed [58:0] multiplier_mul_temp_14;  // sfix59_En52
  wire signed [57:0] pi1_6;  // sfix58_En52
  wire signed [58:0] pi1in_6;  // sfix59_En52
  wire signed [29:0] multiplier_cast_15;  // sfix30_En32
  wire signed [58:0] multiplier_mul_temp_15;  // sfix59_En52
  wire signed [57:0] pi2_6;  // sfix58_En52
  wire signed [58:0] pi2in_6;  // sfix59_En52
  wire signed [58:0] pim_6;  // sfix59_En52
  wire signed [58:0] tmp_re_24;  // sfix59_En52
  wire signed [58:0] tmp_im_24;  // sfix59_En52
  reg signed [58:0] tmp_re_25;  // sfix59_En52
  reg signed [58:0] tmp_im_25;  // sfix59_En52
  wire signed [13:0] tmp_re_26;  // sfix14_En10
  wire signed [13:0] tmp_im_26;  // sfix14_En10
  wire signed [18:0] tmp_re_27;  // sfix19_En13
  wire signed [18:0] tmp_im_27;  // sfix19_En13
  wire signed [18:0] tmp_re_28;  // sfix19_En13
  wire signed [18:0] tmp_im_28;  // sfix19_En13
  wire signed [19:0] tmp_re_29;  // sfix20_En13
  wire signed [19:0] tmp_im_29;  // sfix20_En13
  reg signed [13:0] c257_coef_re [0:5];  // sfix14_En4 [6]
  reg signed [13:0] c257_coef_im [0:5];  // sfix14_En4 [6]
  wire signed [13:0] tmp_re_30;  // sfix14_En4
  wire signed [13:0] tmp_im_30;  // sfix14_En4
  wire signed [13:0] tmp_re_31;  // sfix14_En9
  wire signed [13:0] tmp_im_31;  // sfix14_En9
  wire signed [13:0] ar_9;  // sfix14_En9
  reg signed [13:0] ud1_re;  // sfix14_En14
  reg signed [13:0] ud1_im;  // sfix14_En14
  wire signed [13:0] br_7;  // sfix14_En14
  wire signed [13:0] ai_9;  // sfix14_En9
  wire signed [13:0] bi_7;  // sfix14_En14
  wire signed [27:0] pr1_7;  // sfix28_En23
  wire signed [28:0] pr1in_7;  // sfix29_En23
  wire signed [27:0] pr2_7;  // sfix28_En23
  wire signed [28:0] pr2in_7;  // sfix29_En23
  wire signed [28:0] pre_7;  // sfix29_En23
  wire signed [27:0] pi1_7;  // sfix28_En23
  wire signed [28:0] pi1in_7;  // sfix29_En23
  wire signed [27:0] pi2_7;  // sfix28_En23
  wire signed [28:0] pi2in_7;  // sfix29_En23
  wire signed [28:0] pim_7;  // sfix29_En23
  wire signed [28:0] tmp_re_32;  // sfix29_En23
  wire signed [28:0] tmp_im_32;  // sfix29_En23
  reg signed [28:0] tmp_re_33;  // sfix29_En23
  reg signed [28:0] tmp_im_33;  // sfix29_En23
  wire signed [13:0] tmp_re_34;  // sfix14_En10
  wire signed [13:0] tmp_im_34;  // sfix14_En10
  wire signed [19:0] tmp_re_35;  // sfix20_En13
  wire signed [19:0] tmp_im_35;  // sfix20_En13
  reg signed [19:0] tmp_re_36;  // sfix20_En13
  reg signed [19:0] tmp_im_36;  // sfix20_En13
  wire signed [19:0] tmp_re_37;  // sfix20_En13
  wire signed [19:0] tmp_im_37;  // sfix20_En13
  wire signed [20:0] tmp_re_38;  // sfix21_En13
  wire signed [20:0] tmp_im_38;  // sfix21_En13
  reg signed [13:0] c259_coef_re [0:5];  // sfix14_En4 [6]
  reg signed [13:0] c259_coef_im [0:5];  // sfix14_En4 [6]
  wire signed [13:0] tmp_re_39;  // sfix14_En4
  wire signed [13:0] tmp_im_39;  // sfix14_En4
  wire signed [13:0] tmp_re_40;  // sfix14_En6
  wire signed [13:0] tmp_im_40;  // sfix14_En6
  wire signed [13:0] ar_10;  // sfix14_En6
  wire signed [13:0] br_8;  // sfix14_En14
  wire signed [13:0] ai_10;  // sfix14_En6
  wire signed [13:0] bi_8;  // sfix14_En14
  wire signed [27:0] pr1_8;  // sfix28_En20
  wire signed [28:0] pr1in_8;  // sfix29_En20
  wire signed [27:0] pr2_8;  // sfix28_En20
  wire signed [28:0] pr2in_8;  // sfix29_En20
  wire signed [28:0] pre_8;  // sfix29_En20
  wire signed [27:0] pi1_8;  // sfix28_En20
  wire signed [28:0] pi1in_8;  // sfix29_En20
  wire signed [27:0] pi2_8;  // sfix28_En20
  wire signed [28:0] pi2in_8;  // sfix29_En20
  wire signed [28:0] pim_8;  // sfix29_En20
  wire signed [28:0] tmp_re_41;  // sfix29_En20
  wire signed [28:0] tmp_im_41;  // sfix29_En20
  wire signed [28:0] ar_11;  // sfix29_En20
  reg signed [28:0] ar_12;  // sfix29_En20
  wire signed [13:0] ar_13;  // sfix14_En14
  wire signed [13:0] tmp_1;  // sfix14_En14
  wire signed [14:0] p272tmp_cast;  // sfix15_En14
  wire signed [14:0] p272tmp_cast_1;  // sfix15_En14
  wire signed [13:0] tmp_re_42;  // sfix14_En14
  wire signed [13:0] tmp_im_42;  // sfix14_En14
  wire signed [13:0] br_9;  // sfix14_En14
  wire signed [13:0] ai_11;  // sfix14_En14
  wire signed [13:0] bi_9;  // sfix14_En14
  wire signed [27:0] pr1_9;  // sfix28_En28
  wire signed [28:0] pr1in_9;  // sfix29_En28
  wire signed [27:0] pr2_9;  // sfix28_En28
  wire signed [28:0] pr2in_9;  // sfix29_En28
  wire signed [28:0] pre_9;  // sfix29_En28
  wire signed [27:0] pi1_9;  // sfix28_En28
  wire signed [28:0] pi1in_9;  // sfix29_En28
  wire signed [27:0] pi2_9;  // sfix28_En28
  wire signed [28:0] pi2in_9;  // sfix29_En28
  wire signed [28:0] pim_9;  // sfix29_En28
  wire signed [28:0] tmp_re_43;  // sfix29_En28
  wire signed [28:0] tmp_im_43;  // sfix29_En28
  reg signed [28:0] tmp_re_44;  // sfix29_En28
  reg signed [28:0] tmp_im_44;  // sfix29_En28
  wire [13:0] tmp_re_45;  // ufix14_En14
  wire [13:0] tmp_im_45;  // ufix14_En14
  wire [13:0] br_10;  // ufix14_En14
  wire signed [28:0] ai_12;  // sfix29_En20
  reg signed [28:0] ai_13;  // sfix29_En20
  wire [13:0] bi_10;  // ufix14_En14
  wire signed [14:0] multiplier_cast_16;  // sfix15_En14
  wire signed [43:0] multiplier_mul_temp_16;  // sfix44_En34
  wire signed [42:0] pr1_10;  // sfix43_En34
  wire signed [43:0] pr1in_10;  // sfix44_En34
  wire signed [14:0] multiplier_cast_17;  // sfix15_En14
  wire signed [43:0] multiplier_mul_temp_17;  // sfix44_En34
  wire signed [42:0] pr2_10;  // sfix43_En34
  wire signed [43:0] pr2in_10;  // sfix44_En34
  wire signed [43:0] pre_10;  // sfix44_En34
  wire signed [14:0] multiplier_cast_18;  // sfix15_En14
  wire signed [43:0] multiplier_mul_temp_18;  // sfix44_En34
  wire signed [42:0] pi1_10;  // sfix43_En34
  wire signed [43:0] pi1in_10;  // sfix44_En34
  wire signed [14:0] multiplier_cast_19;  // sfix15_En14
  wire signed [43:0] multiplier_mul_temp_19;  // sfix44_En34
  wire signed [42:0] pi2_10;  // sfix43_En34
  wire signed [43:0] pi2in_10;  // sfix44_En34
  wire signed [43:0] pim_10;  // sfix44_En34
  wire signed [43:0] tmp_re_46;  // sfix44_En34
  wire signed [43:0] tmp_im_46;  // sfix44_En34
  reg signed [43:0] tmp_re_47;  // sfix44_En34
  reg signed [43:0] tmp_im_47;  // sfix44_En34
  wire signed [13:0] tmp_re_48;  // sfix14_En9
  wire signed [13:0] tmp_im_48;  // sfix14_En9
  wire signed [20:0] tmp_re_49;  // sfix21_En13
  wire signed [20:0] tmp_im_49;  // sfix21_En13
  wire signed [20:0] tmp_re_50;  // sfix21_En13
  wire signed [20:0] tmp_im_50;  // sfix21_En13
  wire signed [21:0] tmp_re_51;  // sfix22_En13
  wire signed [21:0] tmp_im_51;  // sfix22_En13
  reg signed [13:0] c261_coef_re [0:5];  // sfix14_En4 [6]
  reg signed [13:0] c261_coef_im [0:5];  // sfix14_En4 [6]
  wire signed [13:0] tmp_re_52;  // sfix14_En4
  wire signed [13:0] tmp_im_52;  // sfix14_En4
  wire [13:0] tmp_re_53;  // ufix14_En5
  wire [13:0] tmp_im_53;  // ufix14_En5
  wire [13:0] ar_14;  // ufix14_En5
  wire signed [13:0] br_11;  // sfix14_En14
  wire [13:0] ai_14;  // ufix14_En5
  wire signed [13:0] bi_11;  // sfix14_En14
  wire signed [14:0] multiplier_cast_20;  // sfix15_En5
  wire signed [28:0] multiplier_mul_temp_20;  // sfix29_En19
  wire signed [27:0] pr1_11;  // sfix28_En19
  wire signed [28:0] pr1in_11;  // sfix29_En19
  wire signed [14:0] multiplier_cast_21;  // sfix15_En5
  wire signed [28:0] multiplier_mul_temp_21;  // sfix29_En19
  wire signed [27:0] pr2_11;  // sfix28_En19
  wire signed [28:0] pr2in_11;  // sfix29_En19
  wire signed [28:0] pre_11;  // sfix29_En19
  wire signed [14:0] multiplier_cast_22;  // sfix15_En5
  wire signed [28:0] multiplier_mul_temp_22;  // sfix29_En19
  wire signed [27:0] pi1_11;  // sfix28_En19
  wire signed [28:0] pi1in_11;  // sfix29_En19
  wire signed [14:0] multiplier_cast_23;  // sfix15_En5
  wire signed [28:0] multiplier_mul_temp_23;  // sfix29_En19
  wire signed [27:0] pi2_11;  // sfix28_En19
  wire signed [28:0] pi2in_11;  // sfix29_En19
  wire signed [28:0] pim_11;  // sfix29_En19
  wire signed [28:0] tmp_re_54;  // sfix29_En19
  wire signed [28:0] tmp_im_54;  // sfix29_En19
  wire signed [28:0] ar_15;  // sfix29_En19
  reg signed [28:0] ar_16;  // sfix29_En19
  wire [13:0] ar_17;  // ufix14_En14
  wire [13:0] br_12;  // ufix14_En14
  wire [13:0] ai_15;  // ufix14_En14
  wire [13:0] bi_12;  // ufix14_En14
  wire [27:0] pr1_12;  // ufix28_En28
  wire [28:0] pr1in_12;  // ufix29_En28
  wire [27:0] pr2_12;  // ufix28_En28
  wire [28:0] pr2in_12;  // ufix29_En28
  wire [28:0] pre_12;  // ufix29_En28
  wire [27:0] pi1_12;  // ufix28_En28
  wire [28:0] pi1in_12;  // ufix29_En28
  wire [27:0] pi2_12;  // ufix28_En28
  wire [28:0] pi2in_12;  // ufix29_En28
  wire [28:0] pim_12;  // ufix29_En28
  wire [28:0] tmp_re_55;  // ufix29_En28
  wire [28:0] tmp_im_55;  // ufix29_En28
  wire [28:0] br_13;  // ufix29_En28
  wire signed [28:0] ai_16;  // sfix29_En19
  reg signed [28:0] ai_17;  // sfix29_En19
  wire [28:0] bi_13;  // ufix29_En28
  wire signed [29:0] multiplier_cast_24;  // sfix30_En28
  wire signed [58:0] multiplier_mul_temp_24;  // sfix59_En47
  wire signed [57:0] pr1_13;  // sfix58_En47
  wire signed [58:0] pr1in_13;  // sfix59_En47
  wire signed [29:0] multiplier_cast_25;  // sfix30_En28
  wire signed [58:0] multiplier_mul_temp_25;  // sfix59_En47
  wire signed [57:0] pr2_13;  // sfix58_En47
  wire signed [58:0] pr2in_13;  // sfix59_En47
  wire signed [58:0] pre_13;  // sfix59_En47
  wire signed [29:0] multiplier_cast_26;  // sfix30_En28
  wire signed [58:0] multiplier_mul_temp_26;  // sfix59_En47
  wire signed [57:0] pi1_13;  // sfix58_En47
  wire signed [58:0] pi1in_13;  // sfix59_En47
  wire signed [29:0] multiplier_cast_27;  // sfix30_En28
  wire signed [58:0] multiplier_mul_temp_27;  // sfix59_En47
  wire signed [57:0] pi2_13;  // sfix58_En47
  wire signed [58:0] pi2in_13;  // sfix59_En47
  wire signed [58:0] pim_13;  // sfix59_En47
  wire signed [58:0] tmp_re_56;  // sfix59_En47
  wire signed [58:0] tmp_im_56;  // sfix59_En47
  reg signed [58:0] tmp_re_57;  // sfix59_En47
  reg signed [58:0] tmp_im_57;  // sfix59_En47
  wire signed [13:0] tmp_re_58;  // sfix14_En9
  wire signed [13:0] tmp_im_58;  // sfix14_En9
  wire signed [21:0] tmp_re_59;  // sfix22_En13
  wire signed [21:0] tmp_im_59;  // sfix22_En13
  wire signed [21:0] tmp_re_60;  // sfix22_En13
  wire signed [21:0] tmp_im_60;  // sfix22_En13


  assign coef_re[0][0] = coef_re_0;
  assign coef_re[1][0] = coef_re_1;
  assign coef_re[2][0] = coef_re_2;
  assign coef_re[0][1] = coef_re_3;
  assign coef_re[1][1] = coef_re_4;
  assign coef_re[2][1] = coef_re_5;

  assign coef_im[0][0] = coef_im_0;
  assign coef_im[1][0] = coef_im_1;
  assign coef_im[2][0] = coef_im_2;
  assign coef_im[0][1] = coef_im_3;
  assign coef_im[1][1] = coef_im_4;
  assign coef_im[2][1] = coef_im_5;

  always @* begin
    c258_coef_re[0] = coef_re[0][0];
    c258_coef_im[0] = coef_im[0][0];
    c258_coef_re[1] = coef_re[1][0];
    c258_coef_im[1] = coef_im[1][0];
    c258_coef_re[2] = coef_re[2][0];
    c258_coef_im[2] = coef_im[2][0];
    c258_coef_re[3] = coef_re[0][1];
    c258_coef_im[3] = coef_im[0][1];
    c258_coef_re[4] = coef_re[1][1];
    c258_coef_im[4] = coef_im[1][1];
    c258_coef_re[5] = coef_re[2][1];
    c258_coef_im[5] = coef_im[2][1];
  end



  assign tmp_re = c258_coef_re[3];
  assign tmp_im = c258_coef_im[3];



  assign tmp_re_1 = {tmp_re[3:0], 10'b0000000000};
  assign tmp_im_1 = {tmp_im[3:0], 10'b0000000000};



  // nonlinear part
  assign ar = tmp_re_1;



  assign br = x_in_re;



  assign ai = tmp_im_1;



  assign bi = x_in_im;



  assign multiplier_cast = {1'b0, ar};
  assign multiplier_mul_temp = multiplier_cast * br;
  assign pr1 = multiplier_mul_temp[27:0];



  assign pr1in = {pr1[27], pr1};



  assign multiplier_cast_1 = {1'b0, ai};
  assign multiplier_mul_temp_1 = multiplier_cast_1 * bi;
  assign pr2 = multiplier_mul_temp_1[27:0];



  assign pr2in = {pr2[27], pr2};



  assign pre = pr1in - pr2in;



  assign multiplier_cast_2 = {1'b0, ar};
  assign multiplier_mul_temp_2 = multiplier_cast_2 * bi;
  assign pi1 = multiplier_mul_temp_2[27:0];



  assign pi1in = {pi1[27], pi1};



  assign multiplier_cast_3 = {1'b0, ai};
  assign multiplier_mul_temp_3 = multiplier_cast_3 * br;
  assign pi2 = multiplier_mul_temp_3[27:0];



  assign pi2in = {pi2[27], pi2};



  assign pim = pi1in + pi2in;



  assign tmp_re_2 = pre;
  assign tmp_im_2 = pim;



  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_process
      if (reset == 1'b1) begin
        tmp_re_3 <= 29'sb00000000000000000000000000000;
        tmp_im_3 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_3 <= tmp_re_2;
          tmp_im_3 <= tmp_im_2;
        end
      end
    end



  assign tmp_re_4 = tmp_re_3[28:15];
  assign tmp_im_4 = tmp_im_3[28:15];



  assign tmp_re_5 = {{4{tmp_re_4[13]}}, tmp_re_4};
  assign tmp_im_5 = {{4{tmp_im_4[13]}}, tmp_im_4};



  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        tmp_re_6 <= 18'sb000000000000000000;
        tmp_im_6 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_6 <= tmp_re_5;
          tmp_im_6 <= tmp_im_5;
        end
      end
    end



  always @* begin
    c260_coef_re[0] = coef_re[0][0];
    c260_coef_im[0] = coef_im[0][0];
    c260_coef_re[1] = coef_re[1][0];
    c260_coef_im[1] = coef_im[1][0];
    c260_coef_re[2] = coef_re[2][0];
    c260_coef_im[2] = coef_im[2][0];
    c260_coef_re[3] = coef_re[0][1];
    c260_coef_im[3] = coef_im[0][1];
    c260_coef_re[4] = coef_re[1][1];
    c260_coef_im[4] = coef_im[1][1];
    c260_coef_re[5] = coef_re[2][1];
    c260_coef_im[5] = coef_im[2][1];
  end



  assign tmp_re_7 = c260_coef_re[4];
  assign tmp_im_7 = c260_coef_im[4];



  assign tmp_re_8 = {tmp_re_7[10:0], 3'b000};
  assign tmp_im_8 = {tmp_im_7[10:0], 3'b000};



  assign ar_1 = tmp_re_8;



  assign br_1 = x_in_re;



  assign ai_1 = tmp_im_8;



  assign bi_1 = x_in_im;



  assign pr1_1 = ar_1 * br_1;



  assign pr1in_1 = {pr1_1[27], pr1_1};



  assign pr2_1 = ai_1 * bi_1;



  assign pr2in_1 = {pr2_1[27], pr2_1};



  assign pre_1 = pr1in_1 - pr2in_1;



  assign pi1_1 = ar_1 * bi_1;



  assign pi1in_1 = {pi1_1[27], pi1_1};



  assign pi2_1 = ai_1 * br_1;



  assign pi2in_1 = {pi2_1[27], pi2_1};



  assign pim_1 = pi1in_1 + pi2in_1;



  assign tmp_re_9 = pre_1;
  assign tmp_im_9 = pim_1;



  assign ar_2 = tmp_re_9;



  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        ar_3 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          ar_3 <= ar_2;
        end
      end
    end



  assign ar_4 = x_in_re;



  // module
  // 更新延迟线
  // 计算输出值
  // 临时变量，用于计算当前输入值的输出
  assign p264tmp_cast = {x_in_im[13], x_in_im};
  assign p264tmp_cast_1 =  - (p264tmp_cast);
  assign tmp = p264tmp_cast_1[13:0];



  assign tmp_re_10 = x_in_re;
  assign tmp_im_10 = tmp;



  assign br_2 = tmp_re_10;



  assign ai_2 = x_in_im;



  assign bi_2 = tmp_im_10;



  assign pr1_2 = ar_4 * br_2;



  assign pr1in_2 = {pr1_2[27], pr1_2};



  assign pr2_2 = ai_2 * bi_2;



  assign pr2in_2 = {pr2_2[27], pr2_2};



  assign pre_2 = pr1in_2 - pr2in_2;



  assign pi1_2 = ar_4 * bi_2;



  assign pi1in_2 = {pi1_2[27], pi1_2};



  assign pi2_2 = ai_2 * br_2;



  assign pi2in_2 = {pi2_2[27], pi2_2};



  assign pim_2 = pi1in_2 + pi2in_2;



  assign tmp_re_11 = pre_2;
  assign tmp_im_11 = pim_2;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_1_process
      if (reset == 1'b1) begin
        tmp_re_12 <= 29'sb00000000000000000000000000000;
        tmp_im_12 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_12 <= tmp_re_11;
          tmp_im_12 <= tmp_im_11;
        end
      end
    end



  assign tmp_re_13 = tmp_re_12[25:12];
  assign tmp_im_13 = tmp_im_12[25:12];



  assign br_3 = tmp_re_13;



  assign ai_3 = tmp_im_9;



  always @(posedge clk or posedge reset)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        ai_4 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          ai_4 <= ai_3;
        end
      end
    end



  assign bi_3 = tmp_im_13;



  assign multiplier_cast_4 = {1'b0, br_3};
  assign multiplier_mul_temp_4 = ar_3 * multiplier_cast_4;
  assign pr1_3 = multiplier_mul_temp_4[42:0];



  assign pr1in_3 = {pr1_3[42], pr1_3};



  assign multiplier_cast_5 = {1'b0, bi_3};
  assign multiplier_mul_temp_5 = ai_4 * multiplier_cast_5;
  assign pr2_3 = multiplier_mul_temp_5[42:0];



  assign pr2in_3 = {pr2_3[42], pr2_3};



  assign pre_3 = pr1in_3 - pr2in_3;



  assign multiplier_cast_6 = {1'b0, bi_3};
  assign multiplier_mul_temp_6 = ar_3 * multiplier_cast_6;
  assign pi1_3 = multiplier_mul_temp_6[42:0];



  assign pi1in_3 = {pi1_3[42], pi1_3};



  assign multiplier_cast_7 = {1'b0, br_3};
  assign multiplier_mul_temp_7 = ai_4 * multiplier_cast_7;
  assign pi2_3 = multiplier_mul_temp_7[42:0];



  assign pi2in_3 = {pi2_3[42], pi2_3};



  assign pim_3 = pi1in_3 + pi2in_3;



  assign tmp_re_14 = pre_3;
  assign tmp_im_14 = pim_3;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_2_process
      if (reset == 1'b1) begin
        tmp_re_15 <= 44'sh00000000000;
        tmp_im_15 <= 44'sh00000000000;
      end
      else begin
        if (enb) begin
          tmp_re_15 <= tmp_re_14;
          tmp_im_15 <= tmp_im_14;
        end
      end
    end



  assign tmp_re_16 = tmp_re_15[40:27];
  assign tmp_im_16 = tmp_im_15[40:27];



  assign tmp_re_17 = {tmp_re_16[13], {tmp_re_16, 3'b000}};
  assign tmp_im_17 = {tmp_im_16[13], {tmp_im_16, 3'b000}};



  assign tmp_re_18 = tmp_re_6 + tmp_re_17;
  assign tmp_im_18 = tmp_im_6 + tmp_im_17;



  assign tmp_re_19 = {tmp_re_18[17], tmp_re_18};
  assign tmp_im_19 = {tmp_im_18[17], tmp_im_18};



  always @* begin
    c262_coef_re[0] = coef_re[0][0];
    c262_coef_im[0] = coef_im[0][0];
    c262_coef_re[1] = coef_re[1][0];
    c262_coef_im[1] = coef_im[1][0];
    c262_coef_re[2] = coef_re[2][0];
    c262_coef_im[2] = coef_im[2][0];
    c262_coef_re[3] = coef_re[0][1];
    c262_coef_im[3] = coef_im[0][1];
    c262_coef_re[4] = coef_re[1][1];
    c262_coef_im[4] = coef_im[1][1];
    c262_coef_re[5] = coef_re[2][1];
    c262_coef_im[5] = coef_im[2][1];
  end



  assign tmp_re_20 = c262_coef_re[5];
  assign tmp_im_20 = c262_coef_im[5];



  assign tmp_re_21 = {tmp_re_20[11:0], 2'b00};
  assign tmp_im_21 = {tmp_im_20[11:0], 2'b00};



  assign ar_5 = tmp_re_21;



  assign br_4 = x_in_re;



  assign ai_5 = tmp_im_21;



  assign bi_4 = x_in_im;



  assign multiplier_cast_8 = {1'b0, ar_5};
  assign multiplier_mul_temp_8 = multiplier_cast_8 * br_4;
  assign pr1_4 = multiplier_mul_temp_8[27:0];



  assign pr1in_4 = {pr1_4[27], pr1_4};



  assign multiplier_cast_9 = {1'b0, ai_5};
  assign multiplier_mul_temp_9 = multiplier_cast_9 * bi_4;
  assign pr2_4 = multiplier_mul_temp_9[27:0];



  assign pr2in_4 = {pr2_4[27], pr2_4};



  assign pre_4 = pr1in_4 - pr2in_4;



  assign multiplier_cast_10 = {1'b0, ar_5};
  assign multiplier_mul_temp_10 = multiplier_cast_10 * bi_4;
  assign pi1_4 = multiplier_mul_temp_10[27:0];



  assign pi1in_4 = {pi1_4[27], pi1_4};



  assign multiplier_cast_11 = {1'b0, ai_5};
  assign multiplier_mul_temp_11 = multiplier_cast_11 * br_4;
  assign pi2_4 = multiplier_mul_temp_11[27:0];



  assign pi2in_4 = {pi2_4[27], pi2_4};



  assign pim_4 = pi1in_4 + pi2in_4;



  assign tmp_re_22 = pre_4;
  assign tmp_im_22 = pim_4;



  assign ar_6 = tmp_re_22;



  always @(posedge clk or posedge reset)
    begin : reduced_2_process
      if (reset == 1'b1) begin
        ar_7 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          ar_7 <= ar_6;
        end
      end
    end



  assign ar_8 = tmp_re_13;



  assign br_5 = tmp_re_13;



  assign ai_6 = tmp_im_13;



  assign bi_5 = tmp_im_13;



  assign pr1_5 = ar_8 * br_5;



  assign pr1in_5 = {1'b0, pr1_5};



  assign pr2_5 = ai_6 * bi_5;



  assign pr2in_5 = {1'b0, pr2_5};



  assign pre_5 = pr1in_5 - pr2in_5;



  assign pi1_5 = ar_8 * bi_5;



  assign pi1in_5 = {1'b0, pi1_5};



  assign pi2_5 = ai_6 * br_5;



  assign pi2in_5 = {1'b0, pi2_5};



  assign pim_5 = pi1in_5 + pi2in_5;



  assign tmp_re_23 = pre_5;
  assign tmp_im_23 = pim_5;



  assign br_6 = tmp_re_23;



  assign ai_7 = tmp_im_22;



  always @(posedge clk or posedge reset)
    begin : reduced_3_process
      if (reset == 1'b1) begin
        ai_8 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          ai_8 <= ai_7;
        end
      end
    end



  assign bi_6 = tmp_im_23;



  assign multiplier_cast_12 = {1'b0, br_6};
  assign multiplier_mul_temp_12 = ar_7 * multiplier_cast_12;
  assign pr1_6 = multiplier_mul_temp_12[57:0];



  assign pr1in_6 = {pr1_6[57], pr1_6};



  assign multiplier_cast_13 = {1'b0, bi_6};
  assign multiplier_mul_temp_13 = ai_8 * multiplier_cast_13;
  assign pr2_6 = multiplier_mul_temp_13[57:0];



  assign pr2in_6 = {pr2_6[57], pr2_6};



  assign pre_6 = pr1in_6 - pr2in_6;



  assign multiplier_cast_14 = {1'b0, bi_6};
  assign multiplier_mul_temp_14 = ar_7 * multiplier_cast_14;
  assign pi1_6 = multiplier_mul_temp_14[57:0];



  assign pi1in_6 = {pi1_6[57], pi1_6};



  assign multiplier_cast_15 = {1'b0, br_6};
  assign multiplier_mul_temp_15 = ai_8 * multiplier_cast_15;
  assign pi2_6 = multiplier_mul_temp_15[57:0];



  assign pi2in_6 = {pi2_6[57], pi2_6};



  assign pim_6 = pi1in_6 + pi2in_6;



  assign tmp_re_24 = pre_6;
  assign tmp_im_24 = pim_6;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_3_process
      if (reset == 1'b1) begin
        tmp_re_25 <= 59'sh000000000000000;
        tmp_im_25 <= 59'sh000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_25 <= tmp_re_24;
          tmp_im_25 <= tmp_im_24;
        end
      end
    end



  assign tmp_re_26 = tmp_re_25[55:42];
  assign tmp_im_26 = tmp_im_25[55:42];



  assign tmp_re_27 = {{2{tmp_re_26[13]}}, {tmp_re_26, 3'b000}};
  assign tmp_im_27 = {{2{tmp_im_26[13]}}, {tmp_im_26, 3'b000}};



  assign tmp_re_28 = tmp_re_19 + tmp_re_27;
  assign tmp_im_28 = tmp_im_19 + tmp_im_27;



  assign tmp_re_29 = {tmp_re_28[18], tmp_re_28};
  assign tmp_im_29 = {tmp_im_28[18], tmp_im_28};



  always @* begin
    c257_coef_re[0] = coef_re[0][0];
    c257_coef_im[0] = coef_im[0][0];
    c257_coef_re[1] = coef_re[1][0];
    c257_coef_im[1] = coef_im[1][0];
    c257_coef_re[2] = coef_re[2][0];
    c257_coef_im[2] = coef_im[2][0];
    c257_coef_re[3] = coef_re[0][1];
    c257_coef_im[3] = coef_im[0][1];
    c257_coef_re[4] = coef_re[1][1];
    c257_coef_im[4] = coef_im[1][1];
    c257_coef_re[5] = coef_re[2][1];
    c257_coef_im[5] = coef_im[2][1];
  end



  // HDL code generation from MATLAB function: Naive_opt_fixpt
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //                                                                          %
  //          Generated by MATLAB 23.2 and Fixed-Point Designer 23.2          %
  //                                                                          %
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // Memory Polynomial Model
  // x_in: Input signal array of length N
  // coefficients: KxM matrix of coefficients
  // M: Memory depth
  // K: Non-linearity order
  // 初始化输出信号数组
  // 声明和初始化延迟寄存器数组
  // persistent ud1 ud2 for memory
  // coefficient value 
  assign tmp_re_30 = c257_coef_re[0];
  assign tmp_im_30 = c257_coef_im[0];



  assign tmp_re_31 = {tmp_re_30[8:0], 5'b00000};
  assign tmp_im_31 = {tmp_im_30[8:0], 5'b00000};



  assign ar_9 = tmp_re_31;



  always @(posedge clk or posedge reset)
    begin : ud1_reg_process
      if (reset == 1'b1) begin
        ud1_re <= 14'sb00000000000000;
        ud1_im <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ud1_re <= x_in_re;
          ud1_im <= x_in_im;
        end
      end
    end



  assign br_7 = ud1_re;



  assign ai_9 = tmp_im_31;



  assign bi_7 = ud1_im;



  assign pr1_7 = ar_9 * br_7;



  assign pr1in_7 = {pr1_7[27], pr1_7};



  assign pr2_7 = ai_9 * bi_7;



  assign pr2in_7 = {pr2_7[27], pr2_7};



  assign pre_7 = pr1in_7 - pr2in_7;



  assign pi1_7 = ar_9 * bi_7;



  assign pi1in_7 = {pi1_7[27], pi1_7};



  assign pi2_7 = ai_9 * br_7;



  assign pi2in_7 = {pi2_7[27], pi2_7};



  assign pim_7 = pi1in_7 + pi2in_7;



  assign tmp_re_32 = pre_7;
  assign tmp_im_32 = pim_7;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_4_process
      if (reset == 1'b1) begin
        tmp_re_33 <= 29'sb00000000000000000000000000000;
        tmp_im_33 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_33 <= tmp_re_32;
          tmp_im_33 <= tmp_im_32;
        end
      end
    end



  assign tmp_re_34 = tmp_re_33[26:13];
  assign tmp_im_34 = tmp_im_33[26:13];



  assign tmp_re_35 = {{3{tmp_re_34[13]}}, {tmp_re_34, 3'b000}};
  assign tmp_im_35 = {{3{tmp_im_34[13]}}, {tmp_im_34, 3'b000}};



  always @(posedge clk or posedge reset)
    begin : delayMatch_1_process
      if (reset == 1'b1) begin
        tmp_re_36 <= 20'sb00000000000000000000;
        tmp_im_36 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_36 <= tmp_re_35;
          tmp_im_36 <= tmp_im_35;
        end
      end
    end



  assign tmp_re_37 = tmp_re_29 + tmp_re_36;
  assign tmp_im_37 = tmp_im_29 + tmp_im_36;



  assign tmp_re_38 = {tmp_re_37[19], tmp_re_37};
  assign tmp_im_38 = {tmp_im_37[19], tmp_im_37};



  always @* begin
    c259_coef_re[0] = coef_re[0][0];
    c259_coef_im[0] = coef_im[0][0];
    c259_coef_re[1] = coef_re[1][0];
    c259_coef_im[1] = coef_im[1][0];
    c259_coef_re[2] = coef_re[2][0];
    c259_coef_im[2] = coef_im[2][0];
    c259_coef_re[3] = coef_re[0][1];
    c259_coef_im[3] = coef_im[0][1];
    c259_coef_re[4] = coef_re[1][1];
    c259_coef_im[4] = coef_im[1][1];
    c259_coef_re[5] = coef_re[2][1];
    c259_coef_im[5] = coef_im[2][1];
  end



  assign tmp_re_39 = c259_coef_re[1];
  assign tmp_im_39 = c259_coef_im[1];



  assign tmp_re_40 = {tmp_re_39[11:0], 2'b00};
  assign tmp_im_40 = {tmp_im_39[11:0], 2'b00};



  assign ar_10 = tmp_re_40;



  assign br_8 = ud1_re;



  assign ai_10 = tmp_im_40;



  assign bi_8 = ud1_im;



  assign pr1_8 = ar_10 * br_8;



  assign pr1in_8 = {pr1_8[27], pr1_8};



  assign pr2_8 = ai_10 * bi_8;



  assign pr2in_8 = {pr2_8[27], pr2_8};



  assign pre_8 = pr1in_8 - pr2in_8;



  assign pi1_8 = ar_10 * bi_8;



  assign pi1in_8 = {pi1_8[27], pi1_8};



  assign pi2_8 = ai_10 * br_8;



  assign pi2in_8 = {pi2_8[27], pi2_8};



  assign pim_8 = pi1in_8 + pi2in_8;



  assign tmp_re_41 = pre_8;
  assign tmp_im_41 = pim_8;



  assign ar_11 = tmp_re_41;



  always @(posedge clk or posedge reset)
    begin : reduced_4_process
      if (reset == 1'b1) begin
        ar_12 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          ar_12 <= ar_11;
        end
      end
    end



  assign ar_13 = ud1_re;



  assign p272tmp_cast = {ud1_im[13], ud1_im};
  assign p272tmp_cast_1 =  - (p272tmp_cast);
  assign tmp_1 = p272tmp_cast_1[13:0];



  assign tmp_re_42 = ud1_re;
  assign tmp_im_42 = tmp_1;



  assign br_9 = tmp_re_42;



  assign ai_11 = ud1_im;



  assign bi_9 = tmp_im_42;



  assign pr1_9 = ar_13 * br_9;



  assign pr1in_9 = {pr1_9[27], pr1_9};



  assign pr2_9 = ai_11 * bi_9;



  assign pr2in_9 = {pr2_9[27], pr2_9};



  assign pre_9 = pr1in_9 - pr2in_9;



  assign pi1_9 = ar_13 * bi_9;



  assign pi1in_9 = {pi1_9[27], pi1_9};



  assign pi2_9 = ai_11 * br_9;



  assign pi2in_9 = {pi2_9[27], pi2_9};



  assign pim_9 = pi1in_9 + pi2in_9;



  assign tmp_re_43 = pre_9;
  assign tmp_im_43 = pim_9;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_5_process
      if (reset == 1'b1) begin
        tmp_re_44 <= 29'sb00000000000000000000000000000;
        tmp_im_44 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_44 <= tmp_re_43;
          tmp_im_44 <= tmp_im_43;
        end
      end
    end



  assign tmp_re_45 = tmp_re_44[27:14];
  assign tmp_im_45 = tmp_im_44[27:14];



  assign br_10 = tmp_re_45;



  assign ai_12 = tmp_im_41;



  always @(posedge clk or posedge reset)
    begin : reduced_5_process
      if (reset == 1'b1) begin
        ai_13 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          ai_13 <= ai_12;
        end
      end
    end



  assign bi_10 = tmp_im_45;



  assign multiplier_cast_16 = {1'b0, br_10};
  assign multiplier_mul_temp_16 = ar_12 * multiplier_cast_16;
  assign pr1_10 = multiplier_mul_temp_16[42:0];



  assign pr1in_10 = {pr1_10[42], pr1_10};



  assign multiplier_cast_17 = {1'b0, bi_10};
  assign multiplier_mul_temp_17 = ai_13 * multiplier_cast_17;
  assign pr2_10 = multiplier_mul_temp_17[42:0];



  assign pr2in_10 = {pr2_10[42], pr2_10};



  assign pre_10 = pr1in_10 - pr2in_10;



  assign multiplier_cast_18 = {1'b0, bi_10};
  assign multiplier_mul_temp_18 = ar_12 * multiplier_cast_18;
  assign pi1_10 = multiplier_mul_temp_18[42:0];



  assign pi1in_10 = {pi1_10[42], pi1_10};



  assign multiplier_cast_19 = {1'b0, br_10};
  assign multiplier_mul_temp_19 = ai_13 * multiplier_cast_19;
  assign pi2_10 = multiplier_mul_temp_19[42:0];



  assign pi2in_10 = {pi2_10[42], pi2_10};



  assign pim_10 = pi1in_10 + pi2in_10;



  assign tmp_re_46 = pre_10;
  assign tmp_im_46 = pim_10;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_6_process
      if (reset == 1'b1) begin
        tmp_re_47 <= 44'sh00000000000;
        tmp_im_47 <= 44'sh00000000000;
      end
      else begin
        if (enb) begin
          tmp_re_47 <= tmp_re_46;
          tmp_im_47 <= tmp_im_46;
        end
      end
    end



  assign tmp_re_48 = tmp_re_47[38:25];
  assign tmp_im_48 = tmp_im_47[38:25];



  assign tmp_re_49 = {{3{tmp_re_48[13]}}, {tmp_re_48, 4'b0000}};
  assign tmp_im_49 = {{3{tmp_im_48[13]}}, {tmp_im_48, 4'b0000}};



  assign tmp_re_50 = tmp_re_38 + tmp_re_49;
  assign tmp_im_50 = tmp_im_38 + tmp_im_49;



  assign tmp_re_51 = {tmp_re_50[20], tmp_re_50};
  assign tmp_im_51 = {tmp_im_50[20], tmp_im_50};



  always @* begin
    c261_coef_re[0] = coef_re[0][0];
    c261_coef_im[0] = coef_im[0][0];
    c261_coef_re[1] = coef_re[1][0];
    c261_coef_im[1] = coef_im[1][0];
    c261_coef_re[2] = coef_re[2][0];
    c261_coef_im[2] = coef_im[2][0];
    c261_coef_re[3] = coef_re[0][1];
    c261_coef_im[3] = coef_im[0][1];
    c261_coef_re[4] = coef_re[1][1];
    c261_coef_im[4] = coef_im[1][1];
    c261_coef_re[5] = coef_re[2][1];
    c261_coef_im[5] = coef_im[2][1];
  end



  assign tmp_re_52 = c261_coef_re[2];
  assign tmp_im_52 = c261_coef_im[2];



  assign tmp_re_53 = {tmp_re_52[12:0], 1'b0};
  assign tmp_im_53 = {tmp_im_52[12:0], 1'b0};



  assign ar_14 = tmp_re_53;



  assign br_11 = ud1_re;



  assign ai_14 = tmp_im_53;



  assign bi_11 = ud1_im;



  assign multiplier_cast_20 = {1'b0, ar_14};
  assign multiplier_mul_temp_20 = multiplier_cast_20 * br_11;
  assign pr1_11 = multiplier_mul_temp_20[27:0];



  assign pr1in_11 = {pr1_11[27], pr1_11};



  assign multiplier_cast_21 = {1'b0, ai_14};
  assign multiplier_mul_temp_21 = multiplier_cast_21 * bi_11;
  assign pr2_11 = multiplier_mul_temp_21[27:0];



  assign pr2in_11 = {pr2_11[27], pr2_11};



  assign pre_11 = pr1in_11 - pr2in_11;



  assign multiplier_cast_22 = {1'b0, ar_14};
  assign multiplier_mul_temp_22 = multiplier_cast_22 * bi_11;
  assign pi1_11 = multiplier_mul_temp_22[27:0];



  assign pi1in_11 = {pi1_11[27], pi1_11};



  assign multiplier_cast_23 = {1'b0, ai_14};
  assign multiplier_mul_temp_23 = multiplier_cast_23 * br_11;
  assign pi2_11 = multiplier_mul_temp_23[27:0];



  assign pi2in_11 = {pi2_11[27], pi2_11};



  assign pim_11 = pi1in_11 + pi2in_11;



  assign tmp_re_54 = pre_11;
  assign tmp_im_54 = pim_11;



  assign ar_15 = tmp_re_54;



  always @(posedge clk or posedge reset)
    begin : reduced_6_process
      if (reset == 1'b1) begin
        ar_16 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          ar_16 <= ar_15;
        end
      end
    end



  assign ar_17 = tmp_re_45;



  assign br_12 = tmp_re_45;



  assign ai_15 = tmp_im_45;



  assign bi_12 = tmp_im_45;



  assign pr1_12 = ar_17 * br_12;



  assign pr1in_12 = {1'b0, pr1_12};



  assign pr2_12 = ai_15 * bi_12;



  assign pr2in_12 = {1'b0, pr2_12};



  assign pre_12 = pr1in_12 - pr2in_12;



  assign pi1_12 = ar_17 * bi_12;



  assign pi1in_12 = {1'b0, pi1_12};



  assign pi2_12 = ai_15 * br_12;



  assign pi2in_12 = {1'b0, pi2_12};



  assign pim_12 = pi1in_12 + pi2in_12;



  assign tmp_re_55 = pre_12;
  assign tmp_im_55 = pim_12;



  assign br_13 = tmp_re_55;



  assign ai_16 = tmp_im_54;



  always @(posedge clk or posedge reset)
    begin : reduced_7_process
      if (reset == 1'b1) begin
        ai_17 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          ai_17 <= ai_16;
        end
      end
    end



  assign bi_13 = tmp_im_55;



  assign multiplier_cast_24 = {1'b0, br_13};
  assign multiplier_mul_temp_24 = ar_16 * multiplier_cast_24;
  assign pr1_13 = multiplier_mul_temp_24[57:0];



  assign pr1in_13 = {pr1_13[57], pr1_13};



  assign multiplier_cast_25 = {1'b0, bi_13};
  assign multiplier_mul_temp_25 = ai_17 * multiplier_cast_25;
  assign pr2_13 = multiplier_mul_temp_25[57:0];



  assign pr2in_13 = {pr2_13[57], pr2_13};



  assign pre_13 = pr1in_13 - pr2in_13;



  assign multiplier_cast_26 = {1'b0, bi_13};
  assign multiplier_mul_temp_26 = ar_16 * multiplier_cast_26;
  assign pi1_13 = multiplier_mul_temp_26[57:0];



  assign pi1in_13 = {pi1_13[57], pi1_13};



  assign multiplier_cast_27 = {1'b0, br_13};
  assign multiplier_mul_temp_27 = ai_17 * multiplier_cast_27;
  assign pi2_13 = multiplier_mul_temp_27[57:0];



  assign pi2in_13 = {pi2_13[57], pi2_13};



  assign pim_13 = pi1in_13 + pi2in_13;



  assign tmp_re_56 = pre_13;
  assign tmp_im_56 = pim_13;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_7_process
      if (reset == 1'b1) begin
        tmp_re_57 <= 59'sh000000000000000;
        tmp_im_57 <= 59'sh000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_57 <= tmp_re_56;
          tmp_im_57 <= tmp_im_56;
        end
      end
    end



  assign tmp_re_58 = tmp_re_57[51:38];
  assign tmp_im_58 = tmp_im_57[51:38];



  assign tmp_re_59 = {{4{tmp_re_58[13]}}, {tmp_re_58, 4'b0000}};
  assign tmp_im_59 = {{4{tmp_im_58[13]}}, {tmp_im_58, 4'b0000}};



  assign tmp_re_60 = tmp_re_51 + tmp_re_59;
  assign tmp_im_60 = tmp_im_51 + tmp_im_59;



  assign y_re = tmp_re_60[15:2];
  assign y_im = tmp_im_60[15:2];



  assign ce_out = clk_enable;

endmodule  // Naive_opt_fixpt

