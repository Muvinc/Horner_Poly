// -------------------------------------------------------------
// 
// File Name: D:\B01-Study\MATLAB_Projects\Projects\Horner_memory\codegen\pipelined_memory\hdlsrc\pipelined_memory_fixpt.v
// Created: 2024-05-22 00:38:46
// 
// Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y_re                          ce_out        1
// y_im                          ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: pipelined_memory_fixpt
// Source Path: pipelined_memory_fixpt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module pipelined_memory
          (clk,
           reset,
           clk_enable,
           x_in_re,
           x_in_im,
           ce_out,
           y_re,
           y_im);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [13:0] x_in_re;  // sfix14_En14
  input   signed [13:0] x_in_im;  // sfix14_En14
  output  ce_out;
  output  signed [13:0] y_re;  // sfix14_En10
  output  signed [13:0] y_im;  // sfix14_En10


  wire enb;
  reg signed [13:0] in1_re;  // sfix14_En14
  reg signed [13:0] in1_im;  // sfix14_En14
  reg signed [13:0] in3_reg_reg_re [0:1];  // sfix14_En14 [2]
  reg signed [13:0] in3_reg_reg_im [0:1];  // sfix14_En14 [2]
  wire signed [13:0] in3_reg_reg_next_re [0:1];  // sfix14_En14 [2]
  wire signed [13:0] in3_reg_reg_next_im [0:1];  // sfix14_En14 [2]
  wire signed [13:0] in3_re;  // sfix14_En14
  wire signed [13:0] in3_im;  // sfix14_En14
  wire signed [13:0] br;  // sfix14_En14
  wire signed [13:0] bi;  // sfix14_En14
  wire signed [27:0] pr1;  // sfix28_En18
  wire signed [28:0] pr1in;  // sfix29_En18
  wire signed [27:0] pr2;  // sfix28_En18
  wire signed [28:0] pr2in;  // sfix29_En18
  wire signed [28:0] pre;  // sfix29_En18
  wire signed [27:0] pi1;  // sfix28_En18
  wire signed [28:0] pi1in;  // sfix29_En18
  wire signed [27:0] pi2;  // sfix28_En18
  wire signed [28:0] pi2in;  // sfix29_En18
  wire signed [28:0] pim;  // sfix29_En18
  wire signed [13:0] reg1_re;  // sfix14_En10
  wire signed [13:0] reg1_im;  // sfix14_En10
  reg signed [13:0] in4_re;  // sfix14_En14
  reg signed [13:0] in4_im;  // sfix14_En14
  wire signed [13:0] br_1;  // sfix14_En14
  wire signed [13:0] bi_1;  // sfix14_En14
  wire signed [27:0] pr1_1;  // sfix28_En18
  wire signed [28:0] pr1in_1;  // sfix29_En18
  wire signed [27:0] pr2_1;  // sfix28_En18
  wire signed [28:0] pr2in_1;  // sfix29_En18
  wire signed [28:0] pre_1;  // sfix29_En18
  wire signed [27:0] pi1_1;  // sfix28_En18
  wire signed [28:0] pi1in_1;  // sfix29_En18
  wire signed [27:0] pi2_1;  // sfix28_En18
  wire signed [28:0] pi2in_1;  // sfix29_En18
  wire signed [28:0] pim_1;  // sfix29_En18
  wire signed [13:0] reg2_re;  // sfix14_En13
  wire signed [13:0] reg2_im;  // sfix14_En13
  wire signed [13:0] reg7_re;  // sfix14_En10
  wire signed [13:0] reg7_im;  // sfix14_En10
  wire signed [17:0] p115reg7_add_cast;  // sfix18_En13
  wire signed [17:0] p115reg7_add_cast_1;  // sfix18_En13
  wire signed [17:0] p115reg7_add_temp;  // sfix18_En13
  wire signed [17:0] p115reg7_add_cast_2;  // sfix18_En13
  wire signed [17:0] p115reg7_add_cast_3;  // sfix18_En13
  wire signed [17:0] p115reg7_add_temp_1;  // sfix18_En13
  wire signed [13:0] a;  // sfix14_En14
  wire signed [27:0] y;  // sfix28_En28
  wire [13:0] moa;  // ufix14_En14
  wire signed [13:0] a_1;  // sfix14_En14
  wire signed [27:0] y_1;  // sfix28_En28
  wire [13:0] mob;  // ufix14_En14
  wire [13:0] tmp;  // ufix14_En14
  wire signed [13:0] br_2;  // sfix14_En14
  wire signed [27:0] cr;  // sfix28_En28
  wire signed [14:0] p25cr_cast;  // sfix15_En14
  wire signed [28:0] p25cr_mul_temp;  // sfix29_En28
  wire signed [13:0] bi_2;  // sfix14_En14
  wire signed [27:0] ci;  // sfix28_En28
  wire signed [14:0] p27ci_cast;  // sfix15_En14
  wire signed [28:0] p27ci_mul_temp;  // sfix29_En28
  wire signed [13:0] tmp_re;  // sfix14_En14
  wire signed [13:0] tmp_im;  // sfix14_En14
  reg signed [13:0] ca1_re;  // sfix14_En14
  reg signed [13:0] ca1_im;  // sfix14_En14
  wire signed [13:0] br_3;  // sfix14_En14
  wire signed [13:0] bi_3;  // sfix14_En14
  wire signed [27:0] pr1_2;  // sfix28_En18
  wire signed [28:0] pr1in_2;  // sfix29_En18
  wire signed [27:0] pr2_2;  // sfix28_En18
  wire signed [28:0] pr2in_2;  // sfix29_En18
  wire signed [28:0] pre_2;  // sfix29_En18
  wire signed [27:0] pi1_2;  // sfix28_En18
  wire signed [28:0] pi1in_2;  // sfix29_En18
  wire signed [27:0] pi2_2;  // sfix28_En18
  wire signed [28:0] pi2in_2;  // sfix29_En18
  wire signed [28:0] pim_2;  // sfix29_En18
  wire signed [13:0] reg3_re;  // sfix14_En9
  wire signed [13:0] reg3_im;  // sfix14_En9
  reg signed [13:0] ca2_re;  // sfix14_En14
  reg signed [13:0] ca2_im;  // sfix14_En14
  wire signed [13:0] br_4;  // sfix14_En14
  wire signed [13:0] bi_4;  // sfix14_En14
  wire signed [27:0] pr1_3;  // sfix28_En18
  wire signed [28:0] pr1in_3;  // sfix29_En18
  wire signed [27:0] pr2_3;  // sfix28_En18
  wire signed [28:0] pr2in_3;  // sfix29_En18
  wire signed [28:0] pre_3;  // sfix29_En18
  wire signed [27:0] pi1_3;  // sfix28_En18
  wire signed [28:0] pi1in_3;  // sfix29_En18
  wire signed [27:0] pi2_3;  // sfix28_En18
  wire signed [28:0] pi2in_3;  // sfix29_En18
  wire signed [28:0] pim_3;  // sfix29_En18
  wire signed [13:0] reg4_re;  // sfix14_En10
  wire signed [13:0] reg4_im;  // sfix14_En10
  wire signed [13:0] reg8_re;  // sfix14_En8
  wire signed [13:0] reg8_im;  // sfix14_En8
  wire signed [15:0] p116reg8_add_cast;  // sfix16_En10
  wire signed [15:0] p116reg8_add_cast_1;  // sfix16_En10
  wire signed [15:0] p116reg8_add_temp;  // sfix16_En10
  wire signed [15:0] p116reg8_add_cast_2;  // sfix16_En10
  wire signed [15:0] p116reg8_add_cast_3;  // sfix16_En10
  wire signed [15:0] p116reg8_add_temp_1;  // sfix16_En10
  wire signed [13:0] reg10_re;  // sfix14_En9
  wire signed [13:0] reg10_im;  // sfix14_En9
  wire signed [16:0] p119reg10_add_cast;  // sfix17_En10
  wire signed [16:0] p119reg10_add_cast_1;  // sfix17_En10
  wire signed [16:0] p119reg10_add_temp;  // sfix17_En10
  wire signed [16:0] p119reg10_add_cast_2;  // sfix17_En10
  wire signed [16:0] p119reg10_add_cast_3;  // sfix17_En10
  wire signed [16:0] p119reg10_add_temp_1;  // sfix17_En10
  wire signed [13:0] ar;  // sfix14_En14
  reg [13:0] mo1;  // ufix14_En14
  wire signed [27:0] cr_1;  // sfix28_En28
  wire signed [14:0] p35cr_cast;  // sfix15_En14
  wire signed [28:0] p35cr_mul_temp;  // sfix29_En28
  wire signed [13:0] ai;  // sfix14_En14
  wire signed [27:0] ci_1;  // sfix28_En28
  wire signed [14:0] p37ci_cast;  // sfix15_En14
  wire signed [28:0] p37ci_mul_temp;  // sfix29_En28
  wire signed [13:0] tmp_re_1;  // sfix14_En14
  wire signed [13:0] tmp_im_1;  // sfix14_En14
  reg signed [13:0] ca5_re;  // sfix14_En14
  reg signed [13:0] ca5_im;  // sfix14_En14
  wire signed [13:0] br_5;  // sfix14_En14
  wire signed [13:0] bi_5;  // sfix14_En14
  wire signed [27:0] pr1_4;  // sfix28_En18
  wire signed [28:0] pr1in_4;  // sfix29_En18
  wire signed [27:0] pr2_4;  // sfix28_En18
  wire signed [28:0] pr2in_4;  // sfix29_En18
  wire signed [28:0] pre_4;  // sfix29_En18
  wire signed [27:0] pi1_4;  // sfix28_En18
  wire signed [28:0] pi1in_4;  // sfix29_En18
  wire signed [27:0] pi2_4;  // sfix28_En18
  wire signed [28:0] pi2in_4;  // sfix29_En18
  wire signed [28:0] pim_4;  // sfix29_En18
  wire signed [13:0] reg5_re;  // sfix14_En9
  wire signed [13:0] reg5_im;  // sfix14_En9
  wire reg6_re;  // ufix1
  wire reg6_im;  // ufix1
  wire signed [13:0] tmp_re_2;  // sfix14_En10
  wire signed [13:0] tmp_im_2;  // sfix14_En10
  wire signed [15:0] p117tmp_add_cast;  // sfix16_En9
  wire signed [15:0] p117tmp_add_cast_1;  // sfix16_En9
  wire signed [15:0] p117tmp_add_temp;  // sfix16_En9
  wire signed [15:0] p117tmp_add_cast_2;  // sfix16_En9
  wire signed [15:0] p117tmp_add_cast_3;  // sfix16_En9
  wire signed [15:0] p117tmp_add_temp_1;  // sfix16_En9
  reg signed [13:0] reg9_re;  // sfix14_En10
  reg signed [13:0] reg9_im;  // sfix14_En10
  wire signed [15:0] p121y_add_cast;  // sfix16_En10
  wire signed [15:0] p121y_add_cast_1;  // sfix16_En10
  wire signed [15:0] p121y_add_temp;  // sfix16_En10
  wire signed [15:0] p121y_add_cast_2;  // sfix16_En10
  wire signed [15:0] p121y_add_cast_3;  // sfix16_En10
  wire signed [15:0] p121y_add_temp_1;  // sfix16_En10
  reg signed [31:0] in3_reg_t_0_0;  // int32


  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : in1_reg_process
      if (reset == 1'b1) begin
        in1_re <= 14'sb00000000000000;
        in1_im <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          in1_re <= x_in_re;
          in1_im <= x_in_im;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : in3_reg_process
      if (reset == 1'b1) begin
        in3_reg_reg_re[0] <= 14'sb00000000000000;
        in3_reg_reg_im[0] <= 14'sb00000000000000;
        in3_reg_reg_re[1] <= 14'sb00000000000000;
        in3_reg_reg_im[1] <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          for(in3_reg_t_0_0 = 32'sd0; in3_reg_t_0_0 <= 32'sd1; in3_reg_t_0_0 = in3_reg_t_0_0 + 32'sd1) begin
            in3_reg_reg_re[in3_reg_t_0_0] <= in3_reg_reg_next_re[in3_reg_t_0_0];
            in3_reg_reg_im[in3_reg_t_0_0] <= in3_reg_reg_next_im[in3_reg_t_0_0];
          end
        end
      end
    end

  assign in3_re = in3_reg_reg_re[1];
  assign in3_im = in3_reg_reg_im[1];
  assign in3_reg_reg_next_re[0] = in1_re;
  assign in3_reg_reg_next_im[0] = in1_im;
  assign in3_reg_reg_next_re[1] = in3_reg_reg_re[0];
  assign in3_reg_reg_next_im[1] = in3_reg_reg_im[0];



  assign br = in3_re;



  assign bi = in3_im;



  assign pr1 = 14'sb11111110010001 * br;



  assign pr1in = {pr1[27], pr1};



  assign pr2 = 14'sb00000011100001 * bi;



  assign pr2in = {pr2[27], pr2};



  assign pre = pr1in - pr2in;



  assign pi1 = 14'sb11111110010001 * bi;



  assign pi1in = {pi1[27], pi1};



  assign pi2 = 14'sb00000011100001 * br;



  assign pi2in = {pi2[27], pi2};



  assign pim = pi1in + pi2in;



  assign reg1_re = pre[21:8];
  assign reg1_im = pim[21:8];



  always @(posedge clk or posedge reset)
    begin : in4_reg_process
      if (reset == 1'b1) begin
        in4_re <= 14'sb00000000000000;
        in4_im <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          in4_re <= in3_re;
          in4_im <= in3_im;
        end
      end
    end



  assign br_1 = in4_re;



  assign bi_1 = in4_im;



  assign pr1_1 = 14'sb00000000001101 * br_1;



  assign pr1in_1 = {pr1_1[27], pr1_1};



  assign pr2_1 = 14'sb00000000001111 * bi_1;



  assign pr2in_1 = {pr2_1[27], pr2_1};



  assign pre_1 = pr1in_1 - pr2in_1;



  assign pi1_1 = 14'sb00000000001101 * bi_1;



  assign pi1in_1 = {pi1_1[27], pi1_1};



  assign pi2_1 = 14'sb00000000001111 * br_1;



  assign pi2in_1 = {pi2_1[27], pi2_1};



  assign pim_1 = pi1in_1 + pi2in_1;



  assign reg2_re = pre_1[18:5];
  assign reg2_im = pim_1[18:5];



  assign p115reg7_add_cast = {reg1_re[13], {reg1_re, 3'b000}};
  assign p115reg7_add_cast_1 = {{4{reg2_re[13]}}, reg2_re};
  assign p115reg7_add_temp = p115reg7_add_cast + p115reg7_add_cast_1;
  assign reg7_re = p115reg7_add_temp[16:3];
  assign p115reg7_add_cast_2 = {reg1_im[13], {reg1_im, 3'b000}};
  assign p115reg7_add_cast_3 = {{4{reg2_im[13]}}, reg2_im};
  assign p115reg7_add_temp_1 = p115reg7_add_cast_2 + p115reg7_add_cast_3;
  assign reg7_im = p115reg7_add_temp_1[16:3];



  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //                                                                          %
  //          Generated by MATLAB 23.2 and Fixed-Point Designer 23.2          %
  //                                                                          %
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // Memory Polynomial Model
  // x_in: Input signal array of length N
  // coefficients: KxM matrix of coefficients
  // M: Memory depth
  // K: Non-linearity order
  // 初始化输出信号数组
  // coefficient matrix
  // 声明和初始化延迟寄存器数组
  // persistent mk1 mk2 mk3 for delay
  // update signal
  // calculate module
  assign a = x_in_re;



  assign y = a * a;



  assign moa = y[27:14];



  assign a_1 = x_in_im;



  assign y_1 = a_1 * a_1;



  assign mob = y_1[27:14];



  assign tmp = moa + mob;



  assign br_2 = in1_re;



  assign p25cr_cast = {1'b0, tmp};
  assign p25cr_mul_temp = p25cr_cast * br_2;
  assign cr = p25cr_mul_temp[27:0];



  assign bi_2 = in1_im;



  assign p27ci_cast = {1'b0, tmp};
  assign p27ci_mul_temp = p27ci_cast * bi_2;
  assign ci = p27ci_mul_temp[27:0];



  assign tmp_re = cr[27:14];
  assign tmp_im = ci[27:14];



  always @(posedge clk or posedge reset)
    begin : ca1_reg_process
      if (reset == 1'b1) begin
        ca1_re <= 14'sb00000000000000;
        ca1_im <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ca1_re <= tmp_re;
          ca1_im <= tmp_im;
        end
      end
    end



  assign br_3 = ca1_re;



  assign bi_3 = ca1_im;



  assign pr1_2 = 14'sb11111101111000 * br_3;



  assign pr1in_2 = {pr1_2[27], pr1_2};



  assign pr2_2 = 14'sb11100101001111 * bi_3;



  assign pr2in_2 = {pr2_2[27], pr2_2};



  assign pre_2 = pr1in_2 - pr2in_2;



  assign pi1_2 = 14'sb11111101111000 * bi_3;



  assign pi1in_2 = {pi1_2[27], pi1_2};



  assign pi2_2 = 14'sb11100101001111 * br_3;



  assign pi2in_2 = {pi2_2[27], pi2_2};



  assign pim_2 = pi1in_2 + pi2in_2;



  assign reg3_re = pre_2[22:9];
  assign reg3_im = pim_2[22:9];



  always @(posedge clk or posedge reset)
    begin : ca2_reg_process
      if (reset == 1'b1) begin
        ca2_re <= 14'sb00000000000000;
        ca2_im <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ca2_re <= ca1_re;
          ca2_im <= ca1_im;
        end
      end
    end



  assign br_4 = ca2_re;



  assign bi_4 = ca2_im;



  assign pr1_3 = 14'sb11111101101000 * br_4;



  assign pr1in_3 = {pr1_3[27], pr1_3};



  assign pr2_3 = 14'sb11110111111000 * bi_4;



  assign pr2in_3 = {pr2_3[27], pr2_3};



  assign pre_3 = pr1in_3 - pr2in_3;



  assign pi1_3 = 14'sb11111101101000 * bi_4;



  assign pi1in_3 = {pi1_3[27], pi1_3};



  assign pi2_3 = 14'sb11110111111000 * br_4;



  assign pi2in_3 = {pi2_3[27], pi2_3};



  assign pim_3 = pi1in_3 + pi2in_3;



  assign reg4_re = pre_3[21:8];
  assign reg4_im = pim_3[21:8];



  assign p116reg8_add_cast = {reg3_re[13], {reg3_re, 1'b0}};
  assign p116reg8_add_cast_1 = {{2{reg4_re[13]}}, reg4_re};
  assign p116reg8_add_temp = p116reg8_add_cast + p116reg8_add_cast_1;
  assign reg8_re = p116reg8_add_temp[15:2];
  assign p116reg8_add_cast_2 = {reg3_im[13], {reg3_im, 1'b0}};
  assign p116reg8_add_cast_3 = {{2{reg4_im[13]}}, reg4_im};
  assign p116reg8_add_temp_1 = p116reg8_add_cast_2 + p116reg8_add_cast_3;
  assign reg8_im = p116reg8_add_temp_1[15:2];



  assign p119reg10_add_cast = {{3{reg7_re[13]}}, reg7_re};
  assign p119reg10_add_cast_1 = {reg8_re[13], {reg8_re, 2'b00}};
  assign p119reg10_add_temp = p119reg10_add_cast + p119reg10_add_cast_1;
  assign reg10_re = p119reg10_add_temp[14:1];
  assign p119reg10_add_cast_2 = {{3{reg7_im[13]}}, reg7_im};
  assign p119reg10_add_cast_3 = {reg8_im[13], {reg8_im, 2'b00}};
  assign p119reg10_add_temp_1 = p119reg10_add_cast_2 + p119reg10_add_cast_3;
  assign reg10_im = p119reg10_add_temp_1[14:1];



  assign ar = tmp_re;



  always @(posedge clk or posedge reset)
    begin : mo1_reg_process
      if (reset == 1'b1) begin
        mo1 <= 14'b00000000000000;
      end
      else begin
        if (enb) begin
          mo1 <= tmp;
        end
      end
    end



  assign p35cr_cast = {1'b0, mo1};
  assign p35cr_mul_temp = ar * p35cr_cast;
  assign cr_1 = p35cr_mul_temp[27:0];



  assign ai = tmp_im;



  assign p37ci_cast = {1'b0, mo1};
  assign p37ci_mul_temp = ai * p37ci_cast;
  assign ci_1 = p37ci_mul_temp[27:0];



  assign tmp_re_1 = cr_1[27:14];
  assign tmp_im_1 = ci_1[27:14];



  always @(posedge clk or posedge reset)
    begin : ca5_reg_process
      if (reset == 1'b1) begin
        ca5_re <= 14'sb00000000000000;
        ca5_im <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ca5_re <= tmp_re_1;
          ca5_im <= tmp_im_1;
        end
      end
    end



  assign br_5 = ca5_re;



  assign bi_5 = ca5_im;



  assign pr1_4 = 14'sb00001100110011 * br_5;



  assign pr1in_4 = {pr1_4[27], pr1_4};



  assign pr2_4 = 14'sb00100010101011 * bi_5;



  assign pr2in_4 = {pr2_4[27], pr2_4};



  assign pre_4 = pr1in_4 - pr2in_4;



  assign pi1_4 = 14'sb00001100110011 * bi_5;



  assign pi1in_4 = {pi1_4[27], pi1_4};



  assign pi2_4 = 14'sb00100010101011 * br_5;



  assign pi2in_4 = {pi2_4[27], pi2_4};



  assign pim_4 = pi1in_4 + pi2in_4;



  assign reg5_re = pre_4[22:9];
  assign reg5_im = pim_4[22:9];



  // HDL code generation from MATLAB function: pipelined_memory_fixpt
  assign reg6_re = 1'b0;
  assign reg6_im = 1'b0;



  assign p117tmp_add_cast = {{2{reg5_re[13]}}, reg5_re};
  assign p117tmp_add_cast_1 = {6'b0, {reg6_re, 9'b000000000}};
  assign p117tmp_add_temp = p117tmp_add_cast + p117tmp_add_cast_1;
  assign tmp_re_2 = {p117tmp_add_temp[12:0], 1'b0};
  assign p117tmp_add_cast_2 = {{2{reg5_im[13]}}, reg5_im};
  assign p117tmp_add_cast_3 = {6'b0, {reg6_im, 9'b000000000}};
  assign p117tmp_add_temp_1 = p117tmp_add_cast_2 + p117tmp_add_cast_3;
  assign tmp_im_2 = {p117tmp_add_temp_1[12:0], 1'b0};



  // output
  always @(posedge clk or posedge reset)
    begin : reg9_reg_process
      if (reset == 1'b1) begin
        reg9_re <= 14'sb00000000000000;
        reg9_im <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          reg9_re <= tmp_re_2;
          reg9_im <= tmp_im_2;
        end
      end
    end



  assign p121y_add_cast = {reg10_re[13], {reg10_re, 1'b0}};
  assign p121y_add_cast_1 = {{2{reg9_re[13]}}, reg9_re};
  assign p121y_add_temp = p121y_add_cast + p121y_add_cast_1;
  assign y_re = p121y_add_temp[13:0];
  assign p121y_add_cast_2 = {reg10_im[13], {reg10_im, 1'b0}};
  assign p121y_add_cast_3 = {{2{reg9_im[13]}}, reg9_im};
  assign p121y_add_temp_1 = p121y_add_cast_2 + p121y_add_cast_3;
  assign y_im = p121y_add_temp_1[13:0];



  assign ce_out = clk_enable;

endmodule  // pipelined_memory_fixpt

