// -------------------------------------------------------------
// 
// File Name: D:\B01-Study\MATLAB_Projects\Projects\Horner_memory\codegen\Horner_memory_opt\hdlsrc\Horner_memory_opt_fixpt.v
// Created: 2024-06-04 00:42:32
// 
// Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y_re                          ce_out        1
// y_im                          ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Horner_memory_opt_fixpt
// Source Path: Horner_memory_opt_fixpt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Horner_memory_opt
          (clk,
           reset,
           clk_enable,
           x_in_re,
           x_in_im,
           ce_out,
           y_re,
           y_im);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [13:0] x_in_re;  // sfix14_En14
  input   signed [13:0] x_in_im;  // sfix14_En14
  output  ce_out;
  output  signed [13:0] y_re;  // sfix14_En11
  output  signed [13:0] y_im;  // sfix14_En11


  wire enb;
  wire signed [13:0] br;  // sfix14_En14
  wire signed [13:0] bi;  // sfix14_En14
  wire signed [27:0] pr1;  // sfix28_En18
  wire signed [28:0] pr1in;  // sfix29_En18
  wire signed [27:0] pr2;  // sfix28_En18
  wire signed [28:0] pr2in;  // sfix29_En18
  wire signed [28:0] pre;  // sfix29_En18
  wire signed [27:0] pi1;  // sfix28_En18
  wire signed [28:0] pi1in;  // sfix29_En18
  wire signed [27:0] pi2;  // sfix28_En18
  wire signed [28:0] pi2in;  // sfix29_En18
  wire signed [28:0] pim;  // sfix29_En18
  wire signed [28:0] tmp_re;  // sfix29_En18
  wire signed [28:0] tmp_im;  // sfix29_En18
  reg signed [28:0] tmp_re_1;  // sfix29_En18
  reg signed [28:0] tmp_im_1;  // sfix29_En18
  wire signed [29:0] tmp_re_2;  // sfix30_En18
  wire signed [29:0] tmp_im_2;  // sfix30_En18
  reg signed [13:0] in2_re;  // sfix14_En14
  reg signed [13:0] in2_im;  // sfix14_En14
  wire signed [13:0] br_1;  // sfix14_En14
  wire signed [13:0] bi_1;  // sfix14_En14
  wire signed [27:0] pr1_1;  // sfix28_En18
  wire signed [28:0] pr1in_1;  // sfix29_En18
  wire signed [27:0] pr2_1;  // sfix28_En18
  wire signed [28:0] pr2in_1;  // sfix29_En18
  wire signed [28:0] pre_1;  // sfix29_En18
  wire signed [27:0] pi1_1;  // sfix28_En18
  wire signed [28:0] pi1in_1;  // sfix29_En18
  wire signed [27:0] pi2_1;  // sfix28_En18
  wire signed [28:0] pi2in_1;  // sfix29_En18
  wire signed [28:0] pim_1;  // sfix29_En18
  wire signed [28:0] tmp_re_3;  // sfix29_En18
  wire signed [28:0] tmp_im_3;  // sfix29_En18
  reg signed [28:0] tmp_re_4;  // sfix29_En18
  reg signed [28:0] tmp_im_4;  // sfix29_En18
  wire signed [29:0] tmp_re_5;  // sfix30_En18
  wire signed [29:0] tmp_im_5;  // sfix30_En18
  wire signed [29:0] tmp_re_6;  // sfix30_En18
  wire signed [29:0] tmp_im_6;  // sfix30_En18
  reg signed [29:0] tmp_re_7;  // sfix30_En18
  reg signed [29:0] tmp_im_7;  // sfix30_En18
  wire signed [13:0] tmp_re_8;  // sfix14_En10
  wire signed [13:0] tmp_im_8;  // sfix14_En10
  wire signed [16:0] tmp_re_9;  // sfix17_En10
  wire signed [16:0] tmp_im_9;  // sfix17_En10
  reg signed [16:0] delayMatch_reg_re [0:1];  // sfix17_En10 [2]
  reg signed [16:0] delayMatch_reg_im [0:1];  // sfix17_En10 [2]
  wire signed [16:0] delayMatch_reg_next_re [0:1];  // sfix17_En10 [2]
  wire signed [16:0] delayMatch_reg_next_im [0:1];  // sfix17_En10 [2]
  wire signed [16:0] tmp_re_10;  // sfix17_En10
  wire signed [16:0] tmp_im_10;  // sfix17_En10
  wire signed [13:0] a;  // sfix14_En14
  wire signed [27:0] tmp;  // sfix28_En28
  wire signed [13:0] a_1;  // sfix14_En14
  wire signed [27:0] tmp_1;  // sfix28_En28
  reg signed [27:0] tmp_2;  // sfix28_En28
  wire signed [28:0] tmp_3;  // sfix29_En28
  reg signed [27:0] tmp_4;  // sfix28_En28
  wire signed [28:0] tmp_5;  // sfix29_En28
  wire signed [28:0] tmp_6;  // sfix29_En28
  reg signed [28:0] tmp_7;  // sfix29_En28
  wire [13:0] tmp_8;  // ufix14_En14
  wire signed [27:0] cr;  // sfix28_En18
  wire signed [14:0] p130cr_cast;  // sfix15_En14
  wire signed [28:0] p130cr_mul_temp;  // sfix29_En18
  wire signed [27:0] ci;  // sfix28_En18
  wire signed [14:0] p131ci_cast;  // sfix15_En14
  wire signed [28:0] p131ci_mul_temp;  // sfix29_En18
  wire signed [27:0] tmp_re_11;  // sfix28_En18
  wire signed [27:0] tmp_im_11;  // sfix28_En18
  reg signed [27:0] tmp_re_12;  // sfix28_En18
  reg signed [27:0] tmp_im_12;  // sfix28_En18
  wire signed [30:0] tmp_re_13;  // sfix31_En20
  wire signed [30:0] tmp_im_13;  // sfix31_En20
  wire [13:0] pa2;  // ufix14_En16
  wire signed [27:0] cr_1;  // sfix28_En20
  wire signed [14:0] p133cr_cast;  // sfix15_En16
  wire signed [28:0] p133cr_mul_temp;  // sfix29_En20
  wire signed [27:0] ci_1;  // sfix28_En20
  wire signed [14:0] p135ci_cast;  // sfix15_En16
  wire signed [28:0] p135ci_mul_temp;  // sfix29_En20
  wire signed [27:0] tmp_re_14;  // sfix28_En20
  wire signed [27:0] tmp_im_14;  // sfix28_En20
  reg signed [27:0] tmp_re_15;  // sfix28_En20
  reg signed [27:0] tmp_im_15;  // sfix28_En20
  wire signed [30:0] tmp_re_16;  // sfix31_En20
  wire signed [30:0] tmp_im_16;  // sfix31_En20
  reg signed [30:0] tmp_re_17;  // sfix31_En20
  reg signed [30:0] tmp_im_17;  // sfix31_En20
  wire signed [30:0] tmp_re_18;  // sfix31_En20
  wire signed [30:0] tmp_im_18;  // sfix31_En20
  wire signed [30:0] ar;  // sfix31_En20
  wire signed [13:0] br_2;  // sfix14_En14
  reg signed [13:0] reduced_reg [0:2];  // sfix14 [3]
  reg signed [13:0] reduced_reg_next [0:2];  // sfix14_En14 [3]
  reg signed [13:0] br_3;  // sfix14_En14
  wire signed [30:0] ai;  // sfix31_En20
  wire signed [13:0] bi_2;  // sfix14_En14
  reg signed [13:0] reduced_reg_1 [0:2];  // sfix14 [3]
  reg signed [13:0] reduced_reg_next_1 [0:2];  // sfix14_En14 [3]
  reg signed [13:0] bi_3;  // sfix14_En14
  wire signed [44:0] pr1_2;  // sfix45_En34
  wire signed [45:0] pr1in_2;  // sfix46_En34
  wire signed [44:0] pr2_2;  // sfix45_En34
  wire signed [45:0] pr2in_2;  // sfix46_En34
  wire signed [45:0] pre_2;  // sfix46_En34
  wire signed [44:0] pi1_2;  // sfix45_En34
  wire signed [45:0] pi1in_2;  // sfix46_En34
  wire signed [44:0] pi2_2;  // sfix45_En34
  wire signed [45:0] pi2in_2;  // sfix46_En34
  wire signed [45:0] pim_2;  // sfix46_En34
  wire signed [45:0] tmp_re_19;  // sfix46_En34
  wire signed [45:0] tmp_im_19;  // sfix46_En34
  reg signed [45:0] tmp_re_20;  // sfix46_En34
  reg signed [45:0] tmp_im_20;  // sfix46_En34
  wire signed [13:0] tmp_re_21;  // sfix14_En8
  wire signed [13:0] tmp_im_21;  // sfix14_En8
  wire signed [16:0] tmp_re_22;  // sfix17_En10
  wire signed [16:0] tmp_im_22;  // sfix17_En10
  wire signed [16:0] tmp_re_23;  // sfix17_En10
  wire signed [16:0] tmp_im_23;  // sfix17_En10
  wire signed [17:0] tmp_re_24;  // sfix18_En10
  wire signed [17:0] tmp_im_24;  // sfix18_En10
  wire [27:0] tmp_9;  // ufix28_En28
  wire [13:0] tmp_10;  // ufix14_En14
  wire signed [27:0] cr_2;  // sfix28_En18
  wire signed [14:0] p146cr_cast;  // sfix15_En14
  wire signed [28:0] p146cr_mul_temp;  // sfix29_En18
  wire signed [27:0] ci_2;  // sfix28_En18
  wire signed [14:0] p147ci_cast;  // sfix15_En14
  wire signed [28:0] p147ci_mul_temp;  // sfix29_En18
  wire signed [27:0] tmp_re_25;  // sfix28_En18
  wire signed [27:0] tmp_im_25;  // sfix28_En18
  reg signed [27:0] tmp_re_26;  // sfix28_En18
  reg signed [27:0] tmp_im_26;  // sfix28_En18
  wire signed [32:0] tmp_re_27;  // sfix33_En22
  wire signed [32:0] tmp_im_27;  // sfix33_En22
  wire [13:0] pb2;  // ufix14_En18
  wire signed [27:0] cr_3;  // sfix28_En22
  wire signed [14:0] p149cr_cast;  // sfix15_En18
  wire signed [28:0] p149cr_mul_temp;  // sfix29_En22
  wire signed [27:0] ci_3;  // sfix28_En22
  wire signed [14:0] p151ci_cast;  // sfix15_En18
  wire signed [28:0] p151ci_mul_temp;  // sfix29_En22
  wire signed [27:0] tmp_re_28;  // sfix28_En22
  wire signed [27:0] tmp_im_28;  // sfix28_En22
  reg signed [27:0] tmp_re_29;  // sfix28_En22
  reg signed [27:0] tmp_im_29;  // sfix28_En22
  wire signed [32:0] tmp_re_30;  // sfix33_En22
  wire signed [32:0] tmp_im_30;  // sfix33_En22
  reg signed [32:0] tmp_re_31;  // sfix33_En22
  reg signed [32:0] tmp_im_31;  // sfix33_En22
  wire signed [32:0] tmp_re_32;  // sfix33_En22
  wire signed [32:0] tmp_im_32;  // sfix33_En22
  wire signed [32:0] ar_1;  // sfix33_En22
  wire signed [13:0] br_4;  // sfix14_En14
  reg signed [13:0] reduced_reg_2 [0:2];  // sfix14 [3]
  reg signed [13:0] reduced_reg_next_2 [0:2];  // sfix14_En14 [3]
  reg signed [13:0] br_5;  // sfix14_En14
  wire signed [32:0] ai_1;  // sfix33_En22
  wire signed [13:0] bi_4;  // sfix14_En14
  reg signed [13:0] reduced_reg_3 [0:2];  // sfix14 [3]
  reg signed [13:0] reduced_reg_next_3 [0:2];  // sfix14_En14 [3]
  reg signed [13:0] bi_5;  // sfix14_En14
  wire signed [46:0] pr1_3;  // sfix47_En36
  wire signed [47:0] pr1in_3;  // sfix48_En36
  wire signed [46:0] pr2_3;  // sfix47_En36
  wire signed [47:0] pr2in_3;  // sfix48_En36
  wire signed [47:0] pre_3;  // sfix48_En36
  wire signed [46:0] pi1_3;  // sfix47_En36
  wire signed [47:0] pi1in_3;  // sfix48_En36
  wire signed [46:0] pi2_3;  // sfix47_En36
  wire signed [47:0] pi2in_3;  // sfix48_En36
  wire signed [47:0] pim_3;  // sfix48_En36
  wire signed [47:0] tmp_re_33;  // sfix48_En36
  wire signed [47:0] tmp_im_33;  // sfix48_En36
  reg signed [47:0] tmp_re_34;  // sfix48_En36
  reg signed [47:0] tmp_im_34;  // sfix48_En36
  wire signed [13:0] tmp_re_35;  // sfix14_En9
  wire signed [13:0] tmp_im_35;  // sfix14_En9
  wire signed [17:0] tmp_re_36;  // sfix18_En10
  wire signed [17:0] tmp_im_36;  // sfix18_En10
  wire signed [17:0] tmp_re_37;  // sfix18_En10
  wire signed [17:0] tmp_im_37;  // sfix18_En10
  reg signed [17:0] tmp_re_38;  // sfix18_En10
  reg signed [17:0] tmp_im_38;  // sfix18_En10
  reg signed [31:0] delayMatch_t_0_0;  // int32
  reg signed [31:0] reduced_t_0_0;  // int32
  reg signed [31:0] reduced_t_0_1;  // int32
  reg signed [31:0] reduced_t_0_01;  // int32
  reg signed [31:0] reduced_t_0_02;  // int32
  reg signed [31:0] reduced_t_0_1_1;  // int32
  reg signed [31:0] reduced_t_0_03;  // int32
  reg signed [31:0] reduced_t_0_1_2;  // int32


  // memory polynomial
  assign br = x_in_re;



  assign bi = x_in_im;



  assign pr1 = 14'sb11111110010001 * br;



  assign pr1in = {pr1[27], pr1};



  assign pr2 = 14'sb00000011100001 * bi;



  assign pr2in = {pr2[27], pr2};



  assign pre = pr1in - pr2in;



  assign pi1 = 14'sb11111110010001 * bi;



  assign pi1in = {pi1[27], pi1};



  assign pi2 = 14'sb00000011100001 * br;



  assign pi2in = {pi2[27], pi2};



  assign pim = pi1in + pi2in;



  assign tmp_re = pre;
  assign tmp_im = pim;



  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_process
      if (reset == 1'b1) begin
        tmp_re_1 <= 29'sb00000000000000000000000000000;
        tmp_im_1 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_1 <= tmp_re;
          tmp_im_1 <= tmp_im;
        end
      end
    end



  assign tmp_re_2 = {tmp_re_1[28], tmp_re_1};
  assign tmp_im_2 = {tmp_im_1[28], tmp_im_1};



  always @(posedge clk or posedge reset)
    begin : in2_reg_process
      if (reset == 1'b1) begin
        in2_re <= 14'sb00000000000000;
        in2_im <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          in2_re <= x_in_re;
          in2_im <= x_in_im;
        end
      end
    end



  assign br_1 = in2_re;



  assign bi_1 = in2_im;



  assign pr1_1 = 14'sb00000000001101 * br_1;



  assign pr1in_1 = {pr1_1[27], pr1_1};



  assign pr2_1 = 14'sb00000000001111 * bi_1;



  assign pr2in_1 = {pr2_1[27], pr2_1};



  assign pre_1 = pr1in_1 - pr2in_1;



  assign pi1_1 = 14'sb00000000001101 * bi_1;



  assign pi1in_1 = {pi1_1[27], pi1_1};



  assign pi2_1 = 14'sb00000000001111 * br_1;



  assign pi2in_1 = {pi2_1[27], pi2_1};



  assign pim_1 = pi1in_1 + pi2in_1;



  assign tmp_re_3 = pre_1;
  assign tmp_im_3 = pim_1;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_1_process
      if (reset == 1'b1) begin
        tmp_re_4 <= 29'sb00000000000000000000000000000;
        tmp_im_4 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_4 <= tmp_re_3;
          tmp_im_4 <= tmp_im_3;
        end
      end
    end



  assign tmp_re_5 = {tmp_re_4[28], tmp_re_4};
  assign tmp_im_5 = {tmp_im_4[28], tmp_im_4};



  assign tmp_re_6 = tmp_re_2 + tmp_re_5;
  assign tmp_im_6 = tmp_im_2 + tmp_im_5;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_2_process
      if (reset == 1'b1) begin
        tmp_re_7 <= 30'sb000000000000000000000000000000;
        tmp_im_7 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_7 <= tmp_re_6;
          tmp_im_7 <= tmp_im_6;
        end
      end
    end



  assign tmp_re_8 = tmp_re_7[21:8];
  assign tmp_im_8 = tmp_im_7[21:8];



  // output
  assign tmp_re_9 = {{3{tmp_re_8[13]}}, tmp_re_8};
  assign tmp_im_9 = {{3{tmp_im_8[13]}}, tmp_im_8};



  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg_re[0] <= 17'sb00000000000000000;
        delayMatch_reg_im[0] <= 17'sb00000000000000000;
        delayMatch_reg_re[1] <= 17'sb00000000000000000;
        delayMatch_reg_im[1] <= 17'sb00000000000000000;
      end
      else begin
        if (enb) begin
          for(delayMatch_t_0_0 = 32'sd0; delayMatch_t_0_0 <= 32'sd1; delayMatch_t_0_0 = delayMatch_t_0_0 + 32'sd1) begin
            delayMatch_reg_re[delayMatch_t_0_0] <= delayMatch_reg_next_re[delayMatch_t_0_0];
            delayMatch_reg_im[delayMatch_t_0_0] <= delayMatch_reg_next_im[delayMatch_t_0_0];
          end
        end
      end
    end

  assign tmp_re_10 = delayMatch_reg_re[1];
  assign tmp_im_10 = delayMatch_reg_im[1];
  assign delayMatch_reg_next_re[0] = tmp_re_9;
  assign delayMatch_reg_next_im[0] = tmp_im_9;
  assign delayMatch_reg_next_re[1] = delayMatch_reg_re[0];
  assign delayMatch_reg_next_im[1] = delayMatch_reg_im[0];



  // HDL code generation from MATLAB function: Horner_memory_opt_fixpt
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //                                                                          %
  //          Generated by MATLAB 23.2 and Fixed-Point Designer 23.2          %
  //                                                                          %
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // Memory Polynomial Model
  // x_in: Input signal array of length N
  // coefficients: KxM matrix of coefficients
  // M: Memory depth
  // K: Non-linearity order
  // 初始化输出信号数组
  // coefficient matrix
  // 声明和初始化延迟寄存器数组
  // persistent mk1 mk2 mk3 for delay
  // module
  assign a = x_in_re;



  assign tmp = a * a;



  assign a_1 = x_in_im;



  assign tmp_1 = a_1 * a_1;



  always @(posedge clk or posedge reset)
    begin : p108tmp_outbuff_out_pipe_process
      if (reset == 1'b1) begin
        tmp_2 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_2 <= tmp;
        end
      end
    end



  assign tmp_3 = {tmp_2[27], tmp_2};



  always @(posedge clk or posedge reset)
    begin : p109tmp_outbuff_out_pipe_process
      if (reset == 1'b1) begin
        tmp_4 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_4 <= tmp_1;
        end
      end
    end



  assign tmp_5 = {tmp_4[27], tmp_4};



  assign tmp_6 = tmp_3 + tmp_5;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_3_process
      if (reset == 1'b1) begin
        tmp_7 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_7 <= tmp_6;
        end
      end
    end



  assign tmp_8 = tmp_7[27:14];



  assign p130cr_cast = {1'b0, tmp_8};
  assign p130cr_mul_temp = 14'sb11111101111000 * p130cr_cast;
  assign cr = p130cr_mul_temp[27:0];



  assign p131ci_cast = {1'b0, tmp_8};
  assign p131ci_mul_temp = 14'sb11100101001111 * p131ci_cast;
  assign ci = p131ci_mul_temp[27:0];



  assign tmp_re_11 = cr;
  assign tmp_im_11 = ci;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_4_process
      if (reset == 1'b1) begin
        tmp_re_12 <= 28'sb0000000000000000000000000000;
        tmp_im_12 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_12 <= tmp_re_11;
          tmp_im_12 <= tmp_im_11;
        end
      end
    end



  assign tmp_re_13 = {tmp_re_12[27], {tmp_re_12, 2'b00}};
  assign tmp_im_13 = {tmp_im_12[27], {tmp_im_12, 2'b00}};



  // update inpout reg
  // update persistent; M = 2, no need to use persistent for px2 and in2
  assign pa2 = {tmp_8[11:0], 2'b00};



  assign p133cr_cast = {1'b0, pa2};
  assign p133cr_mul_temp = 14'sb11111101101000 * p133cr_cast;
  assign cr_1 = p133cr_mul_temp[27:0];



  assign p135ci_cast = {1'b0, pa2};
  assign p135ci_mul_temp = 14'sb11110111111000 * p135ci_cast;
  assign ci_1 = p135ci_mul_temp[27:0];



  assign tmp_re_14 = cr_1;
  assign tmp_im_14 = ci_1;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_5_process
      if (reset == 1'b1) begin
        tmp_re_15 <= 28'sb0000000000000000000000000000;
        tmp_im_15 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_15 <= tmp_re_14;
          tmp_im_15 <= tmp_im_14;
        end
      end
    end



  assign tmp_re_16 = {{3{tmp_re_15[27]}}, tmp_re_15};
  assign tmp_im_16 = {{3{tmp_im_15[27]}}, tmp_im_15};



  always @(posedge clk or posedge reset)
    begin : delayMatch_1_process
      if (reset == 1'b1) begin
        tmp_re_17 <= 31'sb0000000000000000000000000000000;
        tmp_im_17 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_17 <= tmp_re_16;
          tmp_im_17 <= tmp_im_16;
        end
      end
    end



  assign tmp_re_18 = tmp_re_13 + tmp_re_17;
  assign tmp_im_18 = tmp_im_13 + tmp_im_17;



  assign ar = tmp_re_18;



  assign br_2 = x_in_re;



  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        reduced_reg[0] <= 14'sb00000000000000;
        reduced_reg[1] <= 14'sb00000000000000;
        reduced_reg[2] <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          for(reduced_t_0_1 = 32'sd0; reduced_t_0_1 <= 32'sd2; reduced_t_0_1 = reduced_t_0_1 + 32'sd1) begin
            reduced_reg[reduced_t_0_1] <= reduced_reg_next[reduced_t_0_1];
          end
        end
      end
    end

  always @* begin
    br_3 = reduced_reg[2];
    reduced_reg_next[0] = br_2;

    for(reduced_t_0_0 = 32'sd0; reduced_t_0_0 <= 32'sd1; reduced_t_0_0 = reduced_t_0_0 + 32'sd1) begin
      reduced_reg_next[reduced_t_0_0 + 32'sd1] = reduced_reg[reduced_t_0_0];
    end

  end



  assign ai = tmp_im_18;



  assign bi_2 = x_in_im;



  always @(posedge clk or posedge reset)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        reduced_reg_1[0] <= 14'sb00000000000000;
        reduced_reg_1[1] <= 14'sb00000000000000;
        reduced_reg_1[2] <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          for(reduced_t_0_1 = 32'sd0; reduced_t_0_1 <= 32'sd2; reduced_t_0_1 = reduced_t_0_1 + 32'sd1) begin
            reduced_reg_1[reduced_t_0_1] <= reduced_reg_next_1[reduced_t_0_1];
          end
        end
      end
    end

  always @* begin
    bi_3 = reduced_reg_1[2];
    reduced_reg_next_1[0] = bi_2;

    for(reduced_t_0_01 = 32'sd0; reduced_t_0_01 <= 32'sd1; reduced_t_0_01 = reduced_t_0_01 + 32'sd1) begin
      reduced_reg_next_1[reduced_t_0_01 + 32'sd1] = reduced_reg_1[reduced_t_0_01];
    end

  end



  assign pr1_2 = ar * br_3;



  assign pr1in_2 = {pr1_2[44], pr1_2};



  assign pr2_2 = ai * bi_3;



  assign pr2in_2 = {pr2_2[44], pr2_2};



  assign pre_2 = pr1in_2 - pr2in_2;



  assign pi1_2 = ar * bi_3;



  assign pi1in_2 = {pi1_2[44], pi1_2};



  assign pi2_2 = ai * br_3;



  assign pi2in_2 = {pi2_2[44], pi2_2};



  assign pim_2 = pi1in_2 + pi2in_2;



  assign tmp_re_19 = pre_2;
  assign tmp_im_19 = pim_2;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_6_process
      if (reset == 1'b1) begin
        tmp_re_20 <= 46'sh000000000000;
        tmp_im_20 <= 46'sh000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_20 <= tmp_re_19;
          tmp_im_20 <= tmp_im_19;
        end
      end
    end



  assign tmp_re_21 = tmp_re_20[39:26];
  assign tmp_im_21 = tmp_im_20[39:26];



  assign tmp_re_22 = {tmp_re_21[13], {tmp_re_21, 2'b00}};
  assign tmp_im_22 = {tmp_im_21[13], {tmp_im_21, 2'b00}};



  assign tmp_re_23 = tmp_re_10 + tmp_re_22;
  assign tmp_im_23 = tmp_im_10 + tmp_im_22;



  assign tmp_re_24 = {tmp_re_23[16], tmp_re_23};
  assign tmp_im_24 = {tmp_im_23[16], tmp_im_23};



  assign tmp_9 = tmp_8 * tmp_8;



  assign tmp_10 = tmp_9[27:14];



  assign p146cr_cast = {1'b0, tmp_10};
  assign p146cr_mul_temp = 14'sb00010100010001 * p146cr_cast;
  assign cr_2 = p146cr_mul_temp[27:0];



  assign p147ci_cast = {1'b0, tmp_10};
  assign p147ci_mul_temp = 14'sb01001110000100 * p147ci_cast;
  assign ci_2 = p147ci_mul_temp[27:0];



  assign tmp_re_25 = cr_2;
  assign tmp_im_25 = ci_2;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_7_process
      if (reset == 1'b1) begin
        tmp_re_26 <= 28'sb0000000000000000000000000000;
        tmp_im_26 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_26 <= tmp_re_25;
          tmp_im_26 <= tmp_im_25;
        end
      end
    end



  assign tmp_re_27 = {tmp_re_26[27], {tmp_re_26, 4'b0000}};
  assign tmp_im_27 = {tmp_im_26[27], {tmp_im_26, 4'b0000}};



  assign pb2 = {tmp_10[9:0], 4'b0000};



  assign p149cr_cast = {1'b0, pb2};
  assign p149cr_mul_temp = 14'sb00001100110011 * p149cr_cast;
  assign cr_3 = p149cr_mul_temp[27:0];



  assign p151ci_cast = {1'b0, pb2};
  assign p151ci_mul_temp = 14'sb00100010101011 * p151ci_cast;
  assign ci_3 = p151ci_mul_temp[27:0];



  assign tmp_re_28 = cr_3;
  assign tmp_im_28 = ci_3;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_8_process
      if (reset == 1'b1) begin
        tmp_re_29 <= 28'sb0000000000000000000000000000;
        tmp_im_29 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_29 <= tmp_re_28;
          tmp_im_29 <= tmp_im_28;
        end
      end
    end



  assign tmp_re_30 = {{5{tmp_re_29[27]}}, tmp_re_29};
  assign tmp_im_30 = {{5{tmp_im_29[27]}}, tmp_im_29};



  always @(posedge clk or posedge reset)
    begin : delayMatch_2_process
      if (reset == 1'b1) begin
        tmp_re_31 <= 33'sh000000000;
        tmp_im_31 <= 33'sh000000000;
      end
      else begin
        if (enb) begin
          tmp_re_31 <= tmp_re_30;
          tmp_im_31 <= tmp_im_30;
        end
      end
    end



  assign tmp_re_32 = tmp_re_27 + tmp_re_31;
  assign tmp_im_32 = tmp_im_27 + tmp_im_31;



  assign ar_1 = tmp_re_32;



  assign br_4 = x_in_re;



  always @(posedge clk or posedge reset)
    begin : reduced_2_process
      if (reset == 1'b1) begin
        reduced_reg_2[0] <= 14'sb00000000000000;
        reduced_reg_2[1] <= 14'sb00000000000000;
        reduced_reg_2[2] <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          for(reduced_t_0_1_1 = 32'sd0; reduced_t_0_1_1 <= 32'sd2; reduced_t_0_1_1 = reduced_t_0_1_1 + 32'sd1) begin
            reduced_reg_2[reduced_t_0_1_1] <= reduced_reg_next_2[reduced_t_0_1_1];
          end
        end
      end
    end

  always @* begin
    br_5 = reduced_reg_2[2];
    reduced_reg_next_2[0] = br_4;

    for(reduced_t_0_02 = 32'sd0; reduced_t_0_02 <= 32'sd1; reduced_t_0_02 = reduced_t_0_02 + 32'sd1) begin
      reduced_reg_next_2[reduced_t_0_02 + 32'sd1] = reduced_reg_2[reduced_t_0_02];
    end

  end



  assign ai_1 = tmp_im_32;



  assign bi_4 = x_in_im;



  always @(posedge clk or posedge reset)
    begin : reduced_3_process
      if (reset == 1'b1) begin
        reduced_reg_3[0] <= 14'sb00000000000000;
        reduced_reg_3[1] <= 14'sb00000000000000;
        reduced_reg_3[2] <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          for(reduced_t_0_1_2 = 32'sd0; reduced_t_0_1_2 <= 32'sd2; reduced_t_0_1_2 = reduced_t_0_1_2 + 32'sd1) begin
            reduced_reg_3[reduced_t_0_1_2] <= reduced_reg_next_3[reduced_t_0_1_2];
          end
        end
      end
    end

  always @* begin
    bi_5 = reduced_reg_3[2];
    reduced_reg_next_3[0] = bi_4;

    for(reduced_t_0_03 = 32'sd0; reduced_t_0_03 <= 32'sd1; reduced_t_0_03 = reduced_t_0_03 + 32'sd1) begin
      reduced_reg_next_3[reduced_t_0_03 + 32'sd1] = reduced_reg_3[reduced_t_0_03];
    end

  end



  assign pr1_3 = ar_1 * br_5;



  assign pr1in_3 = {pr1_3[46], pr1_3};



  assign pr2_3 = ai_1 * bi_5;



  assign pr2in_3 = {pr2_3[46], pr2_3};



  assign pre_3 = pr1in_3 - pr2in_3;



  assign pi1_3 = ar_1 * bi_5;



  assign pi1in_3 = {pi1_3[46], pi1_3};



  assign pi2_3 = ai_1 * br_5;



  assign pi2in_3 = {pi2_3[46], pi2_3};



  assign pim_3 = pi1in_3 + pi2in_3;



  assign tmp_re_33 = pre_3;
  assign tmp_im_33 = pim_3;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_9_process
      if (reset == 1'b1) begin
        tmp_re_34 <= 48'sh000000000000;
        tmp_im_34 <= 48'sh000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_34 <= tmp_re_33;
          tmp_im_34 <= tmp_im_33;
        end
      end
    end



  assign tmp_re_35 = tmp_re_34[40:27];
  assign tmp_im_35 = tmp_im_34[40:27];



  assign tmp_re_36 = {{3{tmp_re_35[13]}}, {tmp_re_35, 1'b0}};
  assign tmp_im_36 = {{3{tmp_im_35[13]}}, {tmp_im_35, 1'b0}};



  assign tmp_re_37 = tmp_re_24 + tmp_re_36;
  assign tmp_im_37 = tmp_im_24 + tmp_im_36;



  always @(posedge clk or posedge reset)
    begin : buff_out_pipe_10_process
      if (reset == 1'b1) begin
        tmp_re_38 <= 18'sb000000000000000000;
        tmp_im_38 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_re_38 <= tmp_re_37;
          tmp_im_38 <= tmp_im_37;
        end
      end
    end



  assign y_re = {tmp_re_38[12:0], 1'b0};
  assign y_im = {tmp_im_38[12:0], 1'b0};



  assign ce_out = clk_enable;

endmodule  // Horner_memory_opt_fixpt

